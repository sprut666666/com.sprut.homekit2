declare namespace AthomAppsAPI {
    /**
     *
     * @memberof AthomAppsAPI
     * @property { string } id
     * @hideconstructor
     * @protected
     */
    class App {
        id: string;
    }
    /**
     *
     * @memberof AthomAppsAPI
     * @property { string } id
     * @hideconstructor
     * @protected
     */
    class Build {
        id: string;
    }
    /**
     *
     * @memberof AthomAppsAPI
     * @property { number } rating
     * @hideconstructor
     * @protected
     */
    class Review {
        rating: number;
    }
}

declare namespace AthomCallbackAPI {
    /**
     *
     * @memberof AthomCallbackAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     * @protected
     */
    class Error {
        success: boolean;
        message: string;
    }
}

declare namespace AthomCloudAPI {
    /**
     *
     * @memberof AthomCloudAPI
     * @property { number } code
     * @property { string } error
     * @property { string } error_description
     * @hideconstructor
     */
    class Error {
        code: number;
        error: string;
        error_description: string;
    }
    /**
     * OAuth2 credentials payload
     * @memberof AthomCloudAPI
     * @property { string } token_type  ("bearer")
     * @property { string } access_token Access token
     * @property { number } expires_in Access token lifespan in seconds
     * @property { string } refresh_token Refresh token. Can be used within 14 days after issue.
     * @hideconstructor
     */
    class Token {
        /**
         * ("bearer")
        */
        token_type: string;
        /**
         * Access token
        */
        access_token: string;
        /**
         * Access token lifespan in seconds
        */
        expires_in: number;
        /**
         * Refresh token. Can be used within 14 days after issue.
        */
        refresh_token: string;
    }
    /**
     * User role definition
     * @memberof AthomCloudAPI
     * @property { string } _id Role ID
     * @property { string } name Human-readable name
     * @property { string[] } scopes Assigned scopes
     * @hideconstructor
     */
    class Role {
        /**
         * Role ID
        */
        _id: string;
        /**
         * Human-readable name
        */
        name: string;
        /**
         * Assigned scopes
        */
        scopes: string[];
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } firstname First name
     * @property { string } lastname Last name
     * @property { string[] } roleIds Assumed role IDs
     * @property { AthomCloudAPI.Avatar } avatar
     * @hideconstructor
     */
    class UserProfile {
        _id: string;
        /**
         * First name
        */
        firstname: string;
        /**
         * Last name
        */
        lastname: string;
        /**
         * Assumed role IDs
        */
        roleIds: string[];
        avatar: AthomCloudAPI.Avatar;
    }
    /**
     * Avatar URLs
     * @memberof AthomCloudAPI
     * @property { string } small Avatar URL - small
     * @property { string } medium Avatar URL - medium
     * @property { string } large Avatar URL - large
     * @hideconstructor
     */
    class Avatar {
        /**
         * Avatar URL - small
        */
        small: string;
        /**
         * Avatar URL - medium
        */
        medium: string;
        /**
         * Avatar URL - large
        */
        large: string;
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } firstname First name
     * @property { string } lastname Last name
     * @property { string } email Email address
     * @property { string } language Language
     * @property { AthomCloudAPI.Role[] } roles Assumed roles (Only present on single-fetch responses)
     * @property { string[] } roleIds Assumed role IDs
     * @property { AthomCloudAPI.Avatar } avatar
     * @property { AthomCloudAPI.Homey[] } homeys Homeys the user has access to
     * @property { AthomCloudAPI.UserDevice[] } devices Linked devices
     * @hideconstructor
     */
    class User {
        /**
         * Returns a list of Homeys the current user has access to
         * @param {object} [filter] A filter object
         * @returns {AthomCloudAPI.Homey[]} List of Homey objects.
         */
        getHomeys(filter?: any): AthomCloudAPI.Homey[];
        /**
         * Returns a Homey by ID (if the user has access) or throws an error
         * @param {string} id The Homey ID to retrieve
         * @returns {AthomCloudAPI.Homey} The Homey
         */
        getHomeyById(id: string): AthomCloudAPI.Homey;
        /**
         * Returns the first Homey we can access or throws an error
         * @returns {AthomCloudAPI.Homey} The Homey
         */
        getFirstHomey(): AthomCloudAPI.Homey;
        /**
         * Gets a device by id
         * @param id
         */
        getDevice(id: any): void;
        _id: string;
        /**
         * First name
        */
        firstname: string;
        /**
         * Last name
        */
        lastname: string;
        /**
         * Email address
        */
        email: string;
        /**
         * Language
        */
        language: string;
        /**
         * Assumed roles (Only present on single-fetch responses)
        */
        roles: AthomCloudAPI.Role[];
        /**
         * Assumed role IDs
        */
        roleIds: string[];
        avatar: AthomCloudAPI.Avatar;
        /**
         * Homeys the user has access to
        */
        homeys: AthomCloudAPI.Homey[];
        /**
         * Linked devices
        */
        devices: AthomCloudAPI.UserDevice[];
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } name
     * @property { string } platform  ("ios" | "android")
     * @property { string } token
     * @property { string } publicKey
     * @property { string } appVersion
     * @property { string } osVersion
     * @property { string } created
     * @property { string } updated
     * @property { boolean } devmode
     * @hideconstructor
     */
    class UserDevice {
        _id: string;
        name: string;
        /**
         * ("ios" | "android")
        */
        platform: string;
        token: string;
        publicKey: string;
        appVersion: string;
        osVersion: string;
        created: string;
        updated: string;
        devmode: boolean;
    }
    /**
     * User address details
     * @memberof AthomCloudAPI
     * @property { string } street
     * @property { string } number
     * @property { string } zipcode
     * @property { string } city
     * @property { string } country
     * @hideconstructor
     * @protected
     */
    class UserAddress {
        street: string;
        number: string;
        zipcode: string;
        city: string;
        country: string;
    }
    /**
     * User subscription details
     * @memberof AthomCloudAPI
     * @property { number } expiresAt
     * @property { number } startedAt
     * @property { boolean } autoRenew
     * @hideconstructor
     * @protected
     */
    class UserSubscription {
        expiresAt: number;
        startedAt: number;
        autoRenew: boolean;
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } serial Unique Serial Number
     * @hideconstructor
     * @protected
     */
    class Bridge {
        _id: string;
        /**
         * Unique Serial Number
        */
        serial: string;
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } name Human-readable name
     * @property { string } ipInternal IP in local network (not cached)
     * @property { string } ipExternal External IP (not cached)
     * @property { string } localUrl HTTP URL to connect to homey locally
     * @property { string } localUrlSecure HTTPS URL to connect to homey locally
     * @property { string } remoteUrl HTTPS URL to connect to homey remotely
     * @property { number } apiVersion API level to use for this Homey
     * @property { string } softwareVersion Installed software version
     * @property { string } language Configured language
     * @property { string } state Power status
     * @property { object } geolocation Location information
     * @property { object[] } users Authorized users (not cached)
     * @property { AthomCloudAPI.User } users.user
     * @property { string } users.userId The user's ID
     * @property { string } users.role User's assumed role on Homey
     * @property { string } role Current user's assumed role on Homey
     * @property { string } token Current user\'s Homey access token (V1-only)
     * @property { object[] } apps Installed apps (not cached)
     * @property { string } apps.id App ID
     * @property { string } apps.version Installed version
     * @property { string } apps.channel Subscribed channel
     * @hideconstructor
     */
    class Homey {
        /**
         * Logs in to this Homey
         * @param {object} [opts]
         * @param {string[]} [opts.strategy] - A list of connection strategies ('localSecure'|'local'|'cloud'|'mdns')
         * @param {string} [opts.token] - A custom bearer token
         * @returns {HomeyAPI} An HomeyAPI instance to communicate with this homey
         */
        authenticate(opts?: {
            strategy?: string[];
            token?: string;
        }): HomeyAPI;
        /**
         * Updates Homey metadata
         * @param {string} key - The metadata field to update
         * @param {object} value - The value to set the field to
         * @protected
         */
        protected setMetadata(key: string, value: any): void;
        /**
         * Updates this Homey
         * @param {object} properties - A key, value mapping of the properties to update
         * @protected
         */
        protected update(properties: any): void;
        /**
         * Returns the oAuth2 resource ID of this Homey
         */
        resourceId: any;
        _id: string;
        /**
         * Human-readable name
        */
        name: string;
        /**
         * IP in local network (not cached)
        */
        ipInternal: string;
        /**
         * External IP (not cached)
        */
        ipExternal: string;
        /**
         * HTTP URL to connect to homey locally
        */
        localUrl: string;
        /**
         * HTTPS URL to connect to homey locally
        */
        localUrlSecure: string;
        /**
         * HTTPS URL to connect to homey remotely
        */
        remoteUrl: string;
        /**
         * API level to use for this Homey
        */
        apiVersion: number;
        /**
         * Installed software version
        */
        softwareVersion: string;
        /**
         * Configured language
        */
        language: string;
        /**
         * Power status
        */
        state: string;
        /**
         * Location information
        */
        geolocation: any;
        /**
         * Authorized users (not cached)
        */
        users: {
            user: AthomCloudAPI.User;
            userId: string;
            role: string;
        };
        /**
         * Current user's assumed role on Homey
        */
        role: string;
        /**
         * Current user\'s Homey access token (V1-only)
        */
        token: string;
        /**
         * Installed apps (not cached)
        */
        apps: {
            id: string;
            version: string;
            channel: string;
        };
    }
    /**
     * Homey metadata (key-value pairs)
     * @memberof AthomCloudAPI
     * @hideconstructor
     * @protected
     */
    class HomeyMetadata {
    }
}

declare namespace AthomConnectAPI {
    /**
     *
     * @memberof AthomConnectAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     * @protected
     */
    class Error {
        success: boolean;
        message: string;
    }
}

declare namespace AthomFirmwareAPI {
    /**
     *
     * @memberof AthomFirmwareAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     */
    class Error {
        success: boolean;
        message: string;
    }
}

declare namespace AthomSetupAPI {
    /**
     *
     * @memberof AthomSetupAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     * @protected
     */
    class Error {
        success: boolean;
        message: string;
    }
}

declare namespace AthomSignalsAPI {
    /**
     *
     * @memberof AthomSignalsAPI
     * @property { number } code
     * @property { string } error
     * @property { string } error_description
     * @hideconstructor
     * @protected
     */
    class Error {
        code: number;
        error: string;
        error_description: string;
    }
    /**
     *
     * @memberof AthomSignalsAPI
     * @property { string } id The ID of the Signal entry
     * @property { object } meta
     * @property { string } meta.brand The brand name of the device
     * @property { string } meta.type The device type
     * @property { string } meta.name The device name
     * @property { string } meta.deviceClass The deviceClass of this device
     * @property { number } meta.priority An arbitrary priority field that can be filtered on. Higher priority should be more relevant to the user
     * @hideconstructor
     * @protected
     */
    class StrippedSignal {
        /**
         * The ID of the Signal entry
        */
        id: string;
        meta: {
            brand: string;
            type: string;
            name: string;
            deviceClass: string;
            priority: number;
        };
    }
    /**
     *
     * @memberof AthomSignalsAPI
     * @property { string } id The ID of the Signal entry
     * @property { object } meta
     * @property { string } meta.sourceName
     * @property { string } meta.sourceType
     * @property { number } meta.version
     * @property { number } meta.minTxInterval The minimal time in ms between subsequent commands
     * @property { object } meta.capabilities A mapping between the capabilities of this device and the command ids to set them
     * @property { string } meta.numberPrefix The prefix of number commands e.g. 'number_' for commands that look like 'number_0'
     * @property { string } type
     * @property { number[] } sof
     * @property { number[] } eof
     * @property { number } carrier
     * @property { number } sensitivity
     * @property { number } dutyCycle
     * @property { number } repetitions
     * @property { boolean } packing
     * @property { number } interval
     * @property { object } cmds
     * @property { Object.<string, string> } toggleCmds
     * @property { number[][] } words
     * @property { number[] } toggleIndexes
     * @property { number[] } toggleBits
     * @property { boolean } reverseBits
     * @property { number[] } postfixData
     * @hideconstructor
     * @protected
     */
    class Signal {
        /**
         * The ID of the Signal entry
        */
        id: string;
        meta: {
            sourceName: string;
            sourceType: string;
            version: number;
            minTxInterval: number;
            capabilities: any;
            numberPrefix: string;
        };
        type: string;
        sof: number[];
        eof: number[];
        carrier: number;
        sensitivity: number;
        dutyCycle: number;
        repetitions: number;
        packing: boolean;
        interval: number;
        cmds: any;
        toggleCmds: {
            [key: string]: string;
        };
        words: number[][];
        toggleIndexes: number[];
        toggleBits: number[];
        reverseBits: boolean;
        postfixData: number[];
    }
}

declare namespace AthomWebhooksAPI {
    /**
     *
     * @memberof AthomWebhooksAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     * @protected
     */
    class Error {
        success: boolean;
        message: string;
    }
    /**
     *
     * @memberof AthomWebhooksAPI
     * @property { string } id
     * @property { string } secret
     * @property { string } name
     * @property { string } fn
     * @property { number } fired
     * @hideconstructor
     * @protected
     */
    class Webhook {
        id: string;
        secret: string;
        name: string;
        fn: string;
        fired: number;
    }
}

declare class HomeyAPI {
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerAlarms } alarms
     */
    alarms: HomeyAPI.ManagerAlarms;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerApps } apps
     */
    apps: HomeyAPI.ManagerApps;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerAudio } audio
     */
    audio: HomeyAPI.ManagerAudio;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerBackup } backup
     */
    backup: HomeyAPI.ManagerBackup;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerCloud } cloud
     */
    cloud: HomeyAPI.ManagerCloud;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerCoprocessor } coprocessor
     */
    coprocessor: HomeyAPI.ManagerCoprocessor;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDatabase } database
     */
    database: HomeyAPI.ManagerDatabase;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDevices } devices
     */
    devices: HomeyAPI.ManagerDevices;
    /**
     * @protected
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDevkit } devkit
     */
    protected devkit: HomeyAPI.ManagerDevkit;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDrivers } drivers
     */
    drivers: HomeyAPI.ManagerDrivers;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerEnergy } energy
     */
    energy: HomeyAPI.ManagerEnergy;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerExperiments } experiments
     */
    experiments: HomeyAPI.ManagerExperiments;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerFlow } flow
     */
    flow: HomeyAPI.ManagerFlow;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerFlowToken } flowToken
     */
    flowToken: HomeyAPI.ManagerFlowToken;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerGeolocation } geolocation
     */
    geolocation: HomeyAPI.ManagerGeolocation;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerGoogleAssistant } googleAssistant
     */
    googleAssistant: HomeyAPI.ManagerGoogleAssistant;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerI18n } i18n
     */
    i18n: HomeyAPI.ManagerI18n;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerImages } images
     */
    images: HomeyAPI.ManagerImages;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerInsights } insights
     */
    insights: HomeyAPI.ManagerInsights;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerLedring } ledring
     */
    ledring: HomeyAPI.ManagerLedring;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerLogic } logic
     */
    logic: HomeyAPI.ManagerLogic;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerMobile } mobile
     */
    mobile: HomeyAPI.ManagerMobile;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerNotifications } notifications
     */
    notifications: HomeyAPI.ManagerNotifications;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerPresence } presence
     */
    presence: HomeyAPI.ManagerPresence;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerReminder } reminder
     */
    reminder: HomeyAPI.ManagerReminder;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerReports } reports
     */
    reports: HomeyAPI.ManagerReports;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerRF } rf
     */
    rf: HomeyAPI.ManagerRF;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerSessions } sessions
     */
    sessions: HomeyAPI.ManagerSessions;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerSpeechInput } speechInput
     */
    speechInput: HomeyAPI.ManagerSpeechInput;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerSpeechOutput } speechOutput
     */
    speechOutput: HomeyAPI.ManagerSpeechOutput;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerSystem } system
     */
    system: HomeyAPI.ManagerSystem;
    /**
     * @protected
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerUpdates } updates
     */
    protected updates: HomeyAPI.ManagerUpdates;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerUsers } users
     */
    users: HomeyAPI.ManagerUsers;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerWeather } weather
     */
    weather: HomeyAPI.ManagerWeather;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerZigBee } zigBee
     */
    zigBee: HomeyAPI.ManagerZigBee;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerZones } zones
     */
    zones: HomeyAPI.ManagerZones;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerZwave } zwave
     */
    zwave: HomeyAPI.ManagerZwave;
    /**
     * Unsubscribes all realtime events, clear all caches, and remove all event listeners for all managers and their managed objects
     */
    destroy(): void;
    /**
     * Enables automatic route detection
     * @param {number} [interval] Alternative interval in milliseconds (defaults to 15 seconds)
     */
    enableRouteDetection(interval?: number): void;
    /**
     * Disables automatic route detection
     */
    disableRouteDetection(): void;
    /**
     * forces a detection of routes
     * @returns {string} Detected baseUrl
     */
    detectRoute(): string;
    /**
     * Log out on Homey
     */
    logout(): void;
    /**
     * A shortcut to {@link HomeyAPI.ManagerSessions.Session#hasScope} for the current session.
     * @param {string} scope
     * @returns {boolean} true if the scope is available, false otherwise
     */
    hasScope(scope: string): boolean;
    /**
     * A shortcut to {@link HomeyAPI.ManagerSessions.Session#hasScopes} for the current session.
     * @param {string[]} scopes
     * @returns {boolean} true if the scopes are available, false otherwise
     */
    hasScopes(scopes: string[]): boolean;
    /**
     * Creates a new HomeyAPI that connects to the homey that the invoking script is hosted on.
     * @param {string} [token] - The Homey Token to use
     * @returns {HomeyAPI} The HomeyAPI instance
     */
    static forCurrentHomey(token?: string): HomeyAPI;
}

declare namespace HomeyAPI {
    class ManagerAlarms {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerAlarms.Alarm } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerAlarms.Alarm> } Successful response
         */
        getAlarms(opts?: {
            filter?: HomeyAPI.ManagerAlarms.Alarm;
        }): {
            [key: string]: HomeyAPI.ManagerAlarms.Alarm;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerAlarms.Alarm } opts.alarm
         */
        createAlarm(opts?: {
            alarm: HomeyAPI.ManagerAlarms.Alarm;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerAlarms.Alarm } Successful response
         */
        getAlarm(opts?: {
            id: string;
        }): HomeyAPI.ManagerAlarms.Alarm;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerAlarms.Alarm } opts.alarm
         */
        updateAlarm(opts?: {
            id: string;
            alarm: HomeyAPI.ManagerAlarms.Alarm;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteAlarm(opts?: {
            id: string;
        }): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerAlarms {
        /**
         *
         * @memberof HomeyAPI.ManagerAlarms
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerAlarms
         * @property { string } id
         * @property { string } name
         * @property { string } time
         * @property { boolean } enabled
         * @property { string } nextOccurance
         * @property { object } repetition
         * @property { boolean } repetition.monday
         * @property { boolean } repetition.tuesday
         * @property { boolean } repetition.wednesday
         * @property { boolean } repetition.thursday
         * @property { boolean } repetition.friday
         * @property { boolean } repetition.saturday
         * @property { boolean } repetition.sunday
         * @hideconstructor
         */
        class Alarm {
            id: string;
            name: string;
            time: string;
            enabled: boolean;
            nextOccurance: string;
            repetition: {
                monday: boolean;
                tuesday: boolean;
                wednesday: boolean;
                thursday: boolean;
                friday: boolean;
                saturday: boolean;
                sunday: boolean;
            };
        }
    }
    class ManagerApps {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerApps.App } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerApps.App> } Successful response
         */
        getApps(opts?: {
            filter?: HomeyAPI.ManagerApps.App;
        }): {
            [key: string]: HomeyAPI.ManagerApps.App;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.url
         * @param { string } opts.hash
         * @param { object } [opts.env]
         * @param { string } [opts.origin]
         * @param { string } [opts.channel]
         * @param { boolean } [opts.forceEnabled]
         * @protected
         */
        protected installApp(opts?: {
            url: string;
            hash: string;
            env?: any;
            origin?: string;
            channel?: string;
            forceEnabled?: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerApps.App } Successful response
         */
        getApp(opts?: {
            id: string;
        }): HomeyAPI.ManagerApps.App;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerApps.App } opts.app
         */
        updateApp(opts?: {
            id: string;
            app: HomeyAPI.ManagerApps.App;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { boolean } [opts.purgeSettings]
         */
        uninstallApp(opts?: {
            id: string;
            purgeSettings?: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } [opts.message]
         */
        getAppStd(opts?: {
            id: string;
            message?: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { object } A key-value object with app settings
         */
        getAppSettings(opts?: {
            id: string;
        }): any;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.name
         */
        getAppSetting(opts?: {
            id: string;
            name: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.name
         * @param { object } opts.value
         */
        setAppSetting(opts?: {
            id: string;
            name: string;
            value: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.name
         */
        unsetAppSetting(opts?: {
            id: string;
            name: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        restartApp(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        garbageCollectApp(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        enableApp(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        disableApp(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        getAppLocales(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } [opts.channel]  -  ("stable" | "beta" | "alpha")
         */
        installFromAppStore(opts?: {
            id: string;
            channel?: string;
        }): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerApps {
        /**
         *
         * @memberof HomeyAPI.ManagerApps
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerApps
         * @property { boolean } enabled
         * @property { boolean } autoupdate
         * @property { string } id
         * @property { number } sdk  (1 | 2)
         * @property { string } name
         * @property { string } origin  ("appstore" | "devkit_run" | "devkit_install" | "unknown")
         * @property { string } channel  ("stable" | "beta" | "alpha")
         * @property { string } version
         * @property { string } compatibility
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { object } author
         * @property { string } author.name
         * @property { string } author.email
         * @property { string[] } permissions
         * @property { object } images
         * @property { string } images.small
         * @property { string } images.large
         * @property { string } session
         * @property { boolean } ready
         * @property { string } state  ("stopped" | "stopping" | "starting" | "running")
         * @property { boolean } crashed
         * @property { string } crashedMessage
         * @property { number } exitCode
         * @property { string } exitSignal
         * @property { number } exitCount
         * @property { boolean } settings
         * @property { string } brandColor
         * @property { boolean } hasDrivers
         * @property { object } usage
         * @property { number } usage.cpu
         * @property { number } usage.mem
         * @property { object } updateAvailable
         * @property { string } updateAvailable.version
         * @property { string[] } updateAvailable.permissions
         * @hideconstructor
         */
        class App {
            /**
             * Sends an API HTTP GET call to this App
             * @param {string} path - The endpoint to make the call to
             * @param {object} [queryParameters] - The HTTP query parameters
             * @returns {object} the API response
             */
            apiGet(path: string, queryParameters?: any): any;
            /**
             * Sends an API HTTP PUT call to this App
             * @param {string} path - The endpoint to make the call to
             * @param {object} [body] - The HTTP body
             * @param {object} [queryParameters] - The HTTP query parameters
             * @returns {object} the API response
             */
            apiPut(path: string, body?: any, queryParameters?: any): any;
            /**
             * Sends an API HTTP POST call to this App
             * @param {string} path - The endpoint to make the call to
             * @param {object} [body] - The HTTP body
             * @param {object} [queryParameters] - The HTTP query parameters
             * @returns {object} the API response
             */
            apiPost(path: string, body?: any, queryParameters?: any): any;
            /**
             * Sends an API HTTP DELETE call to this App
             * @param {string} path - The endpoint to make the call to
             * @param {object} [body] - The HTTP body
             * @param {object} [queryParameters] - The HTTP query parameters
             * @returns {object} the API response
             */
            apiDelete(path: string, body?: any, queryParameters?: any): any;
            enabled: boolean;
            autoupdate: boolean;
            id: string;
            /**
             * (1 | 2)
            */
            sdk: number;
            name: string;
            /**
             * ("appstore" | "devkit_run" | "devkit_install" | "unknown")
            */
            origin: string;
            /**
             * ("stable" | "beta" | "alpha")
            */
            channel: string;
            version: string;
            compatibility: string;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            author: {
                name: string;
                email: string;
            };
            permissions: string[];
            images: {
                small: string;
                large: string;
            };
            session: string;
            ready: boolean;
            /**
             * ("stopped" | "stopping" | "starting" | "running")
            */
            state: string;
            crashed: boolean;
            crashedMessage: string;
            exitCode: number;
            exitSignal: string;
            exitCount: number;
            settings: boolean;
            brandColor: string;
            hasDrivers: boolean;
            usage: {
                cpu: number;
                mem: number;
            };
            updateAvailable: {
                version: string;
                permissions: string[];
            };
        }
    }
    class ManagerAudio {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        playVolumeHint(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { number } opts.value
         */
        setOptionVolume(opts?: {
            value: number;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionVolume(opts?: any): void;
    }
    namespace ManagerAudio {
        /**
         *
         * @memberof HomeyAPI.ManagerAudio
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerBackup {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        scheduleBackup(opts?: any): void;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { object } The state of this manager
         */
        getState(opts?: any): any;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } opts.value
         */
        setOptionAutomaticBackupsEnabled(opts?: {
            value: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionAutomaticBackupsEnabled(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionLastSuccessfulBackup(opts?: any): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerBackup {
        /**
         *
         * @memberof HomeyAPI.ManagerBackup
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerCloud {
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { object } The state of this manager
         */
        getState(opts?: any): any;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerCloud {
        /**
         *
         * @memberof HomeyAPI.ManagerCloud
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerCoprocessor {
        /**
         * Sets the rx modulation until the next tx job
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @since 1.5.13
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.deviceId]  -  ("ctrl433" | "ctrl868")
         * @param { string } [opts.type]  -  ("ASK" | "FSK" | "2FSK" | "4FSK" | "GFSK" | "MSK")
         * @param { number } [opts.carrier]
         * @param { number } [opts.channelDeviation]
         * @param { number } [opts.channelSpacing]
         * @param { number } [opts.baudRate]
         */
        setModulation(opts?: {
            deviceId?: string;
            type?: string;
            carrier?: number;
            channelDeviation?: number;
            channelSpacing?: number;
            baudRate?: number;
        }): void;
        /**
         * Sets the rx AGC until the next tx job
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @since 1.5.13
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.deviceId]  -  ("ctrl433" | "ctrl868")
         * @param { object } [opts.config]
         */
        setConfig(opts?: {
            deviceId?: string;
            config?: any;
        }): void;
    }
    namespace ManagerCoprocessor {
        /**
         *
         * @memberof HomeyAPI.ManagerCoprocessor
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerDatabase {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected optimize(opts?: any): void;
    }
    namespace ManagerDatabase {
        /**
         *
         * @memberof HomeyAPI.ManagerDatabase
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerDevices {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDevices.Device } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerDevices.Device> } Successful response
         */
        getDevices(opts?: {
            filter?: HomeyAPI.ManagerDevices.Device;
        }): {
            [key: string]: HomeyAPI.ManagerDevices.Device;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerDevices.Device } Successful response
         */
        getDevice(opts?: {
            id: string;
        }): HomeyAPI.ManagerDevices.Device;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerDevices.Device } opts.device
         * @returns { HomeyAPI.ManagerDevices.Device } Successful response
         */
        updateDevice(opts?: {
            id: string;
            device: HomeyAPI.ManagerDevices.Device;
        }): HomeyAPI.ManagerDevices.Device;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteDevice(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.deviceId
         * @param { string } opts.capabilityId
         * @param { object } opts.value
         * @param { object } [opts.opts]
         * @param { string } [opts.transactionId]
         * @returns { object } Successful response
         */
        setCapabilityValue(opts?: {
            deviceId: string;
            capabilityId: string;
            value: any;
            opts?: any;
            transactionId?: string;
        }): any;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        getDeviceSettingsObj(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } opts.settings
         * @returns { object } returns an object containing the actual changed settings and an optional message
         */
        setDeviceSettings(opts?: {
            id: string;
            settings: any;
        }): any;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDevices.Capability } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { HomeyAPI.ManagerDevices.Capability[] } Successful response
         */
        getCapabilities(opts?: {
            filter?: HomeyAPI.ManagerDevices.Capability;
        }): HomeyAPI.ManagerDevices.Capability[];
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerDevices.Capability } Successful response
         */
        getCapability(opts?: {
            uri: string;
            id: string;
        }): HomeyAPI.ManagerDevices.Capability;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerDevices {
        /**
         *
         * @memberof HomeyAPI.ManagerDevices
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDevices
         * @property { string } id
         * @property { string } name
         * @property { string } driverUri
         * @property { string } driverId
         * @property { string } zone The id of the device's zone.
         * @property { object } data
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { object } settings
         * @property { boolean } settingsObj This property is true when there are settings, getable by the getDeviceSettingsObj method
         * @property { string } class
         * @property { object } energy
         * @property { object } energy.approximation
         * @property { number } energy.approximation.usageOn
         * @property { number } energy.approximation.usageOff
         * @property { number } energy.approximation.usageConstant
         * @property { boolean } energy.cumulative
         * @property { string[] } energy.batteries
         * @property { object } energyObj
         * @property { object } virtualClass
         * @property { object } ui
         * @property { string } ui.quickAction Optional capabilityId of the quick action
         * @property { object[] } ui.components
         * @property { string } ui.components.id ID of the UI component
         * @property { string[] } ui.components.capabilities An array of capabilityIds
         * @property { string[] } capabilities
         * @property { Object.<string, object> } capabilitiesObj
         * @property { string } capabilitiesObj.[key].id
         * @property { string } capabilitiesObj.[key].uri
         * @property { string } capabilitiesObj.[key].title
         * @property { string } capabilitiesObj.[key].desc
         * @property { string } capabilitiesObj.[key].type  ("boolean" | "number" | "string" | "enum")
         * @property { boolean } capabilitiesObj.[key].getable
         * @property { boolean } capabilitiesObj.[key].setable
         * @property { string } capabilitiesObj.[key].chartType  ("line" | "area" | "stepLine" | "column" | "spline" | "splineArea" | "scatter")
         * @property { number } capabilitiesObj.[key].decimals
         * @property { number } capabilitiesObj.[key].min
         * @property { number } capabilitiesObj.[key].max
         * @property { number } capabilitiesObj.[key].step
         * @property { string } capabilitiesObj.[key].units
         * @property { object[] } capabilitiesObj.[key].values
         * @property { string } capabilitiesObj.[key].values.id
         * @property { string } capabilitiesObj.[key].values.title
         * @property { object } capabilitiesObj.[key].value
         * @property { string } capabilitiesObj.[key].lastUpdated
         * @property { object } capabilitiesObj.[key].options
         * @property { object } capabilitiesOptions
         * @property { string[] } flags
         * @property { boolean } ready A device is when the device's driver is available and ready.
         * @property { boolean } available A device can be available or unavailable, decided by the device's driver. If the driver is unavailable, the property `unavailableMessage` might be set. For example, a device can be unavailable when there is no wireless connection possible.
         * @property { boolean } repair If true, this device can be repaired using a repair PairSession.
         * @property { boolean } unpair If true, this device needs to be deleted using an unpair PairSession.
         * @property { string } unavailableMessage
         * @property { object[] } images
         * @property { string } images.type  ("media" | "camera")
         * @property { string } images.id
         * @property { HomeyAPI.ManagerImages.Image } images.imageObj
         * @property { object[] } insights
         * @property { string } insights.uri
         * @property { string } insights.id
         * @property { string } insights.title
         * @property { string } insights.titleTrue
         * @property { string } insights.titleFalse
         * @property { string } insights.units
         * @property { number } insights.decimals
         * @property { string } color
         * @hideconstructor
         */
        class Device {
            /**
             * Creates a new CapabilityInstance.
             *
             * A CapabilityInstance can be used to integrate a two-way sync of capability states into your app.
             *
             * @param {string} capabilityId The capability identifier
             * @param {function} listener A function to invoke when the capability is changed by anything other than the returned capabilityInstance
             *
             * @returns {HomeyAPI.ManagerDevices.Device.CapabilityInstance}
             */
            makeCapabilityInstance(capabilityId: string, listener: (...params: any[]) => any): HomeyAPI.ManagerDevices.Device.CapabilityInstance;
            id: string;
            name: string;
            driverUri: string;
            driverId: string;
            /**
             * The id of the device's zone.
            */
            zone: string;
            data: any;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            settings: any;
            /**
             * This property is true when there are settings, getable by the getDeviceSettingsObj method
            */
            settingsObj: boolean;
            class: string;
            energy: {
                approximation: {
                    usageOn: number;
                    usageOff: number;
                    usageConstant: number;
                };
                cumulative: boolean;
                batteries: string[];
            };
            energyObj: any;
            virtualClass: any;
            ui: {
                quickAction: string;
                components: {
                    id: string;
                    capabilities: string[];
                };
            };
            capabilities: string[];
            capabilitiesObj: {
                [key: string]: object;
            };
            capabilitiesOptions: any;
            flags: string[];
            /**
             * A device is when the device's driver is available and ready.
            */
            ready: boolean;
            /**
             * A device can be available or unavailable, decided by the device's driver. If the driver is unavailable, the property `unavailableMessage` might be set. For example, a device can be unavailable when there is no wireless connection possible.
            */
            available: boolean;
            /**
             * If true, this device can be repaired using a repair PairSession.
            */
            repair: boolean;
            /**
             * If true, this device needs to be deleted using an unpair PairSession.
            */
            unpair: boolean;
            unavailableMessage: string;
            images: {
                type: string;
                id: string;
                imageObj: HomeyAPI.ManagerImages.Image;
            };
            insights: {
                uri: string;
                id: string;
                title: string;
                titleTrue: string;
                titleFalse: string;
                units: string;
                decimals: number;
            };
            color: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDevices
         * @property { string } id
         * @property { string } uri
         * @property { string } title
         * @property { string } desc
         * @property { string } type  ("boolean" | "number" | "string" | "enum")
         * @property { boolean } getable
         * @property { boolean } setable
         * @property { string } chartType  ("line" | "area" | "stepLine" | "column" | "spline" | "splineArea" | "scatter")
         * @property { number } decimals
         * @property { number } min
         * @property { number } max
         * @property { number } step
         * @property { string } units
         * @property { object[] } values
         * @property { string } values.id
         * @property { string } values.title
         * @hideconstructor
         */
        class Capability {
            id: string;
            uri: string;
            title: string;
            desc: string;
            /**
             * ("boolean" | "number" | "string" | "enum")
            */
            type: string;
            getable: boolean;
            setable: boolean;
            /**
             * ("line" | "area" | "stepLine" | "column" | "spline" | "splineArea" | "scatter")
            */
            chartType: string;
            decimals: number;
            min: number;
            max: number;
            step: number;
            units: string;
            values: {
                id: string;
                title: string;
            };
        }
        namespace Device {
            class CapabilityInstance {
                /**
                 * Detaches the capability listener and stops invoking the event callback
                 *
                 */
                destroy(): void;
                /**
                 * Sets the capability to the specified value.
                 * @param {*} value The new value
                 */
                setValue(value: any): void;
                /**
                 * The Device to which this capability belongs
                 * @type {HomeyAPI.ManagerDevices.Device}
                 * @readonly
                 */
                readonly device: HomeyAPI.ManagerDevices.Device;
                /**
                 * The CapabilityObj for this capability
                 * @readonly
                 */
                readonly capability: any;
                /**
                 * The current capability value or most recently pending requested value
                 * @type {*}
                 * @readonly
                 */
                readonly value: any;
                /**
                 * The moment this capability last changed
                 * @type {Date}
                 * @readonly
                 */
                readonly lastChanged: Date;
                /**
                 * The Capability ID
                 * @type {string}
                 * @readonly
                 */
                readonly id: string;
                /**
                 * True if this capability is gettable
                 * @type {boolean}
                 * @readonly
                 */
                readonly getable: boolean;
                /**
                 * True if this capability is settable
                 * @type {boolean}
                 * @readonly
                 */
                readonly setable: boolean;
                /**
                 * Array of values this capability can accept or undefined
                 * @type {string[]}
                 * @readonly
                 */
                readonly values: string[];
                /**
                 * The type of the value of this capability
                 * @type {string}
                 * @readonly
                 */
                readonly type: string;
                /**
                 * The minimal value for this capability
                 * @type {number}
                 * @readonly
                 */
                readonly min: number;
                /**
                 * The maximal value for this capability
                 * @type {number}
                 * @readonly
                 */
                readonly max: number;
                /**
                 * The amount of decimals for this capability
                 * @type {number}
                 * @readonly
                 */
                readonly decimals: number;
                /**
                 * The step size for this capability
                 * @type {number}
                 * @readonly
                 */
                readonly step: number;
                /**
                 * The title of this capability
                 * @type {string}
                 * @readonly
                 */
                readonly title: string;
                /**
                 * The unit of this capability
                 * @type {string}
                 * @readonly
                 */
                readonly units: string;
                /**
                 * The description of this capability
                 * @type {Date}
                 * @readonly
                 */
                readonly desc: Date;
            }
        }
    }
    class ManagerDevkit {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.animation
         * @protected
         */
        protected startLedringAnimation(opts?: {
            animation: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.animationId
         * @protected
         */
        protected stopLedringAnimation(opts?: {
            animationId: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.app  - A tar.gz of the homey app
         * @param { boolean } opts.debug
         * @param { string } opts.env
         * @param { boolean } opts.purgeSettings
         * @protected
         */
        protected runApp(opts?: {
            app: any;
            debug: boolean;
            env: string;
            purgeSettings: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.session
         * @protected
         */
        protected stopApp(opts?: {
            session: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected getUsbMode(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.os  -  ("osx" | "win")
         * @protected
         */
        protected setUsbMode(opts?: {
            os: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected getAppUsage(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.session
         * @protected
         */
        protected getAppStdOut(opts?: {
            session: string;
        }): void;
    }
    namespace ManagerDevkit {
        /**
         *
         * @memberof HomeyAPI.ManagerDevkit
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         * @protected
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerDrivers {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDrivers.Driver } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { HomeyAPI.ManagerDrivers.Driver[] } Successful response
         */
        getDrivers(opts?: {
            filter?: HomeyAPI.ManagerDrivers.Driver;
        }): HomeyAPI.ManagerDrivers.Driver[];
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerDrivers.Driver } Successful response
         */
        getDriver(opts?: {
            uri: string;
            id: string;
        }): HomeyAPI.ManagerDrivers.Driver;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Object.<string, HomeyAPI.ManagerDrivers.PairSession> } Successful response
         */
        getPairSessions(opts?: any): {
            [key: string]: HomeyAPI.ManagerDrivers.PairSession;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDrivers.PairSession } opts.pairsession
         * @returns { HomeyAPI.ManagerDrivers.PairSession } Successful response
         */
        createPairSession(opts?: {
            pairsession: HomeyAPI.ManagerDrivers.PairSession;
        }): HomeyAPI.ManagerDrivers.PairSession;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerDrivers.PairSession } Successful response
         */
        getPairSession(opts?: {
            id: string;
        }): HomeyAPI.ManagerDrivers.PairSession;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deletePairSession(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.event
         * @param { object } opts.data
         */
        emitPairingEvent(opts?: {
            id: string;
            event: string;
            data: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.callbackId
         * @param { object } [opts.data]
         */
        emitPairingCallback(opts?: {
            id: string;
            callbackId: string;
            data?: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        emitPairingHeartbeat(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerDrivers.Device } opts.device
         * @returns { HomeyAPI.ManagerDrivers.Device } Successful response
         */
        createPairSessionDevice(opts?: {
            id: string;
            device: HomeyAPI.ManagerDrivers.Device;
        }): HomeyAPI.ManagerDrivers.Device;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deletePairSessionDevice(opts?: {
            id: string;
        }): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerDrivers {
        /**
         *
         * @memberof HomeyAPI.ManagerDrivers
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDrivers
         * @property { string } id
         * @property { string } uri
         * @property { object } uriObj
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { boolean } ready
         * @property { boolean } pair
         * @property { boolean } unpair
         * @property { boolean } repair
         * @property { string } color
         * @property { boolean } deprecated
         * @hideconstructor
         */
        class Driver {
            id: string;
            uri: string;
            uriObj: any;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            ready: boolean;
            pair: boolean;
            unpair: boolean;
            repair: boolean;
            color: string;
            deprecated: boolean;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDrivers
         * @property { string } id
         * @property { string } name
         * @property { string } driverUri
         * @property { string } driverId
         * @property { string } zone The id of the device's zone.
         * @property { object } data
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { object } settings
         * @property { boolean } settingsObj This property is true when there are settings, getable by the getDeviceSettingsObj method
         * @property { string } class
         * @property { object } energy
         * @property { object } energy.approximation
         * @property { number } energy.approximation.usageOn
         * @property { number } energy.approximation.usageOff
         * @property { number } energy.approximation.usageConstant
         * @property { boolean } energy.cumulative
         * @property { string[] } energy.batteries
         * @property { object } energyObj
         * @property { object } virtualClass
         * @property { object } ui
         * @property { string } ui.quickAction Optional capabilityId of the quick action
         * @property { object[] } ui.components
         * @property { string } ui.components.id ID of the UI component
         * @property { string[] } ui.components.capabilities An array of capabilityIds
         * @property { string[] } capabilities
         * @property { Object.<string, object> } capabilitiesObj
         * @property { string } capabilitiesObj.[key].id
         * @property { string } capabilitiesObj.[key].uri
         * @property { string } capabilitiesObj.[key].title
         * @property { string } capabilitiesObj.[key].desc
         * @property { string } capabilitiesObj.[key].type  ("boolean" | "number" | "string" | "enum")
         * @property { boolean } capabilitiesObj.[key].getable
         * @property { boolean } capabilitiesObj.[key].setable
         * @property { string } capabilitiesObj.[key].chartType  ("line" | "area" | "stepLine" | "column" | "spline" | "splineArea" | "scatter")
         * @property { number } capabilitiesObj.[key].decimals
         * @property { number } capabilitiesObj.[key].min
         * @property { number } capabilitiesObj.[key].max
         * @property { number } capabilitiesObj.[key].step
         * @property { string } capabilitiesObj.[key].units
         * @property { object[] } capabilitiesObj.[key].values
         * @property { string } capabilitiesObj.[key].values.id
         * @property { string } capabilitiesObj.[key].values.title
         * @property { object } capabilitiesObj.[key].value
         * @property { string } capabilitiesObj.[key].lastUpdated
         * @property { object } capabilitiesObj.[key].options
         * @property { object } capabilitiesOptions
         * @property { string[] } flags
         * @property { boolean } ready A device is when the device's driver is available and ready.
         * @property { boolean } available A device can be available or unavailable, decided by the device's driver. If the driver is unavailable, the property `unavailableMessage` might be set. For example, a device can be unavailable when there is no wireless connection possible.
         * @property { boolean } repair If true, this device can be repaired using a repair PairSession.
         * @property { boolean } unpair If true, this device needs to be deleted using an unpair PairSession.
         * @property { string } unavailableMessage
         * @property { object[] } images
         * @property { string } images.type  ("media" | "camera")
         * @property { string } images.id
         * @property { HomeyAPI.ManagerImages.Image } images.imageObj
         * @property { object[] } insights
         * @property { string } insights.uri
         * @property { string } insights.id
         * @property { string } insights.title
         * @property { string } insights.titleTrue
         * @property { string } insights.titleFalse
         * @property { string } insights.units
         * @property { number } insights.decimals
         * @property { string } color
         * @hideconstructor
         */
        class Device {
            id: string;
            name: string;
            driverUri: string;
            driverId: string;
            /**
             * The id of the device's zone.
            */
            zone: string;
            data: any;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            settings: any;
            /**
             * This property is true when there are settings, getable by the getDeviceSettingsObj method
            */
            settingsObj: boolean;
            class: string;
            energy: {
                approximation: {
                    usageOn: number;
                    usageOff: number;
                    usageConstant: number;
                };
                cumulative: boolean;
                batteries: string[];
            };
            energyObj: any;
            virtualClass: any;
            ui: {
                quickAction: string;
                components: {
                    id: string;
                    capabilities: string[];
                };
            };
            capabilities: string[];
            capabilitiesObj: {
                [key: string]: object;
            };
            capabilitiesOptions: any;
            flags: string[];
            /**
             * A device is when the device's driver is available and ready.
            */
            ready: boolean;
            /**
             * A device can be available or unavailable, decided by the device's driver. If the driver is unavailable, the property `unavailableMessage` might be set. For example, a device can be unavailable when there is no wireless connection possible.
            */
            available: boolean;
            /**
             * If true, this device can be repaired using a repair PairSession.
            */
            repair: boolean;
            /**
             * If true, this device needs to be deleted using an unpair PairSession.
            */
            unpair: boolean;
            unavailableMessage: string;
            images: {
                type: string;
                id: string;
                imageObj: HomeyAPI.ManagerImages.Image;
            };
            insights: {
                uri: string;
                id: string;
                title: string;
                titleTrue: string;
                titleFalse: string;
                units: string;
                decimals: number;
            };
            color: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDrivers
         * @property { string } id
         * @property { string } type  ("pair" | "unpair" | "repair")
         * @property { string } driverId
         * @property { string } driverUri
         * @property { string } deviceId
         * @property { string } zoneId
         * @property { object[] } views
         * @hideconstructor
         */
        class PairSession {
            id: string;
            /**
             * ("pair" | "unpair" | "repair")
            */
            type: string;
            driverId: string;
            driverUri: string;
            deviceId: string;
            zoneId: string;
            views: object[];
        }
    }
    class ManagerEnergy {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.zone]
         */
        getLiveReport(opts?: {
            zone?: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { number } opts.value
         */
        setOptionKWhCost(opts?: {
            value: number;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionKWhCost(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value
         */
        setOptionCurrency(opts?: {
            value: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionCurrency(opts?: any): void;
    }
    namespace ManagerEnergy {
        /**
         *
         * @memberof HomeyAPI.ManagerEnergy
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerExperiments {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getExperiments(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        enableExperiment(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        disableExperiment(opts?: {
            id: string;
        }): void;
    }
    namespace ManagerExperiments {
        /**
         *
         * @memberof HomeyAPI.ManagerExperiments
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerFlow {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.FlowCardTrigger } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { HomeyAPI.ManagerFlow.FlowCardTrigger[] } Successful response
         */
        getFlowCardTriggers(opts?: {
            filter?: HomeyAPI.ManagerFlow.FlowCardTrigger;
        }): HomeyAPI.ManagerFlow.FlowCardTrigger[];
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerFlow.FlowCardTrigger } Successful response
         */
        getFlowCardTrigger(opts?: {
            uri: string;
            id: string;
        }): HomeyAPI.ManagerFlow.FlowCardTrigger;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.FlowCardCondition } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { HomeyAPI.ManagerFlow.FlowCardCondition[] } Successful response
         */
        getFlowCardConditions(opts?: {
            filter?: HomeyAPI.ManagerFlow.FlowCardCondition;
        }): HomeyAPI.ManagerFlow.FlowCardCondition[];
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerFlow.FlowCardCondition } Successful response
         */
        getFlowCardCondition(opts?: {
            uri: string;
            id: string;
        }): HomeyAPI.ManagerFlow.FlowCardCondition;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.FlowCardAction } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { HomeyAPI.ManagerFlow.FlowCardAction[] } Successful response
         */
        getFlowCardActions(opts?: {
            filter?: HomeyAPI.ManagerFlow.FlowCardAction;
        }): HomeyAPI.ManagerFlow.FlowCardAction[];
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerFlow.FlowCardAction } Successful response
         */
        getFlowCardAction(opts?: {
            uri: string;
            id: string;
        }): HomeyAPI.ManagerFlow.FlowCardAction;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.type
         * @param { string } opts.uri
         * @param { string } opts.id
         * @param { string } opts.name
         * @param { string } opts.query
         * @param { object } [opts.args]
         */
        getFlowCardAutocomplete(opts?: {
            type: string;
            uri: string;
            id: string;
            name: string;
            query: string;
            args?: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.Flow } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerFlow.Flow> } Successful response
         */
        getFlows(opts?: {
            filter?: HomeyAPI.ManagerFlow.Flow;
        }): {
            [key: string]: HomeyAPI.ManagerFlow.Flow;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.Flow } opts.flow
         */
        createFlow(opts?: {
            flow: HomeyAPI.ManagerFlow.Flow;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerFlow.Flow } Successful response
         */
        getFlow(opts?: {
            id: string;
        }): HomeyAPI.ManagerFlow.Flow;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerFlow.Flow } opts.flow
         */
        updateFlow(opts?: {
            id: string;
            flow: HomeyAPI.ManagerFlow.Flow;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteFlow(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        shareFlow(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.Flow } opts.flow
         * @param { object } opts.tokens
         * @param { string } [opts.sessionId]
         */
        testFlow(opts?: {
            flow: HomeyAPI.ManagerFlow.Flow;
            tokens: any;
            sessionId?: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.start<br/>
         * </p>
         * @since 1.5.2
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } [opts.state]
         */
        triggerFlow(opts?: {
            id: string;
            state?: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.FlowFolder } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerFlow.FlowFolder> } Successful response
         */
        getFlowFolders(opts?: {
            filter?: HomeyAPI.ManagerFlow.FlowFolder;
        }): {
            [key: string]: HomeyAPI.ManagerFlow.FlowFolder;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.flowfolder
         * @returns { HomeyAPI.ManagerFlow.FlowFolder } Successful response
         */
        createFlowFolder(opts?: {
            flowfolder: any;
        }): HomeyAPI.ManagerFlow.FlowFolder;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerFlow.FlowFolder } Successful response
         */
        getFlowFolder(opts?: {
            id: string;
        }): HomeyAPI.ManagerFlow.FlowFolder;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } opts.flowfolder
         * @returns { HomeyAPI.ManagerFlow.FlowFolder } Successful response
         */
        updateFlowFolder(opts?: {
            id: string;
            flowfolder: any;
        }): HomeyAPI.ManagerFlow.FlowFolder;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteFlowFolder(opts?: {
            id: string;
        }): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerFlow {
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } id
         * @property { string } name
         * @property { boolean } enabled
         * @property { object } folder
         * @property { number } order
         * @property { boolean } broken
         * @property { object } trigger
         * @property { string } trigger.uri
         * @property { string } trigger.id
         * @property { string } trigger.droptoken
         * @property { object } trigger.args
         * @property { object[] } conditions
         * @property { string } conditions.uri
         * @property { string } conditions.id
         * @property { string } conditions.droptoken
         * @property { object } conditions.args
         * @property { string } conditions.group  ("group1" | "group2" | "group3")
         * @property { boolean } conditions.inverted
         * @property { object[] } actions
         * @property { string } actions.uri
         * @property { string } actions.id
         * @property { string } actions.droptoken
         * @property { object } actions.args
         * @property { string } actions.group  ("then" | "else")
         * @property { object } actions.duration
         * @property { number } actions.duration.multiplier  (1 | 60)
         * @property { string } actions.duration.number
         * @property { object } actions.delay
         * @property { number } actions.delay.multiplier  (1 | 60)
         * @property { string } actions.delay.number
         * @hideconstructor
         */
        class Flow {
            id: string;
            name: string;
            enabled: boolean;
            folder: any;
            order: number;
            broken: boolean;
            trigger: {
                uri: string;
                id: string;
                droptoken: string;
                args: any;
            };
            conditions: {
                uri: string;
                id: string;
                droptoken: string;
                args: any;
                group: string;
                inverted: boolean;
            };
            actions: {
                uri: string;
                id: string;
                droptoken: string;
                args: any;
                group: string;
                duration: {
                    multiplier: number;
                    number: string;
                };
                delay: {
                    multiplier: number;
                    number: string;
                };
            };
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } uri
         * @property { string } id
         * @property { object } args
         * @property { boolean } deprecated
         * @property { boolean } droptoken
         * @property { boolean } duration
         * @property { string } group
         * @property { object } uriObj
         * @property { boolean } broken
         * @property { string } title
         * @property { string } hint
         * @property { object[] } tokens
         * @property { string } tokens.id
         * @property { string } tokens.title
         * @property { string } tokens.type
         * @property { object } tokens.example
         * @hideconstructor
         */
        class FlowCardTrigger {
            uri: string;
            id: string;
            args: any;
            deprecated: boolean;
            droptoken: boolean;
            duration: boolean;
            group: string;
            uriObj: any;
            broken: boolean;
            title: string;
            hint: string;
            tokens: {
                id: string;
                title: string;
                type: string;
                example: any;
            };
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } uri
         * @property { string } id
         * @property { object } args
         * @property { boolean } deprecated
         * @property { boolean } droptoken
         * @property { boolean } duration
         * @property { string } group
         * @property { object } uriObj
         * @property { boolean } broken
         * @property { string } title
         * @property { string } hint
         * @hideconstructor
         */
        class FlowCardCondition {
            uri: string;
            id: string;
            args: any;
            deprecated: boolean;
            droptoken: boolean;
            duration: boolean;
            group: string;
            uriObj: any;
            broken: boolean;
            title: string;
            hint: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } uri
         * @property { string } id
         * @property { object } args
         * @property { boolean } deprecated
         * @property { boolean } droptoken
         * @property { boolean } duration
         * @property { string } group
         * @property { object } uriObj
         * @property { boolean } broken
         * @property { string } title
         * @property { string } hint
         * @hideconstructor
         */
        class FlowCardAction {
            uri: string;
            id: string;
            args: any;
            deprecated: boolean;
            droptoken: boolean;
            duration: boolean;
            group: string;
            uriObj: any;
            broken: boolean;
            title: string;
            hint: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { object } cards
         * @property { HomeyAPI.ManagerFlow.FlowCardTrigger[] } cards.trigger
         * @property { HomeyAPI.ManagerFlow.FlowCardCondition[] } cards.condition
         * @property { HomeyAPI.ManagerFlow.FlowCardAction[] } cards.action
         * @hideconstructor
         */
        class FlowCardGroup {
            cards: {
                trigger: HomeyAPI.ManagerFlow.FlowCardTrigger[];
                condition: HomeyAPI.ManagerFlow.FlowCardCondition[];
                action: HomeyAPI.ManagerFlow.FlowCardAction[];
            };
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } id
         * @property { string } name
         * @property { number } order
         * @property { string } parent
         * @hideconstructor
         */
        class FlowFolder {
            id: string;
            name: string;
            order: number;
            parent: string;
        }
    }
    class ManagerFlowToken {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlowToken.FlowToken } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { HomeyAPI.ManagerFlowToken.FlowToken[] } Successful response
         */
        getFlowTokens(opts?: {
            filter?: HomeyAPI.ManagerFlowToken.FlowToken;
        }): HomeyAPI.ManagerFlowToken.FlowToken[];
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerFlowToken.FlowToken } Successful response
         */
        getFlowToken(opts?: {
            uri: string;
            id: string;
        }): HomeyAPI.ManagerFlowToken.FlowToken;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerFlowToken {
        /**
         *
         * @memberof HomeyAPI.ManagerFlowToken
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlowToken
         * @property { string } uri
         * @property { string } id
         * @property { string } title
         * @property { string } type
         * @property { object } value
         * @property { object } uriObj
         * @hideconstructor
         */
        class FlowToken {
            uri: string;
            id: string;
            title: string;
            type: string;
            value: any;
            uriObj: any;
        }
    }
    class ManagerGeolocation {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value  -  ("auto" | "manual")
         */
        setOptionMode(opts?: {
            value: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionMode(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.value
         * @param { number } opts.value.latitude
         * @param { number } opts.value.longitude
         * @param { number } opts.value.accuracy
         */
        setOptionLocation(opts?: {
            value: {
                latitude: number;
                longitude: number;
                accuracy: number;
            };
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionLocation(opts?: any): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerGeolocation {
        /**
         *
         * @memberof HomeyAPI.ManagerGeolocation
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerGoogleAssistant {
        /**
         * Synchronize Homey devices with Google Assistant
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        sync(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } opts.value
         */
        setOptionEnabled(opts?: {
            value: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionEnabled(opts?: any): void;
    }
    namespace ManagerGoogleAssistant {
        /**
         *
         * @memberof HomeyAPI.ManagerGoogleAssistant
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerI18n {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value
         */
        setOptionLanguage(opts?: {
            value: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionLanguage(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value  -  ("metric")
         */
        setOptionUnits(opts?: {
            value: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionUnits(opts?: any): void;
        /**
         * Translates an i18n-object (e.g. `{ en: 'My String', nl: 'Mijn tekst' }` to a string
         * Uses the default language when getConfig has not been called prior to this method.
         * @param {Object} input
         * @returns {string}
         */
        __(input: any): string;
    }
    namespace ManagerI18n {
        /**
         *
         * @memberof HomeyAPI.ManagerI18n
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerImages {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerImages.Image } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerImages.Image> } Successful response
         */
        getImages(opts?: {
            filter?: HomeyAPI.ManagerImages.Image;
        }): {
            [key: string]: HomeyAPI.ManagerImages.Image;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerImages.Image } Successful response
         */
        getImage(opts?: {
            id: string;
        }): HomeyAPI.ManagerImages.Image;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerImages {
        /**
         *
         * @memberof HomeyAPI.ManagerImages
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerImages
         * @property { string } id
         * @property { string } ownerUri
         * @property { string } url
         * @property { string } lastUpdated
         * @hideconstructor
         */
        class Image {
            /**
             * Gets the full URL to this image, including hostname
             */
            fullUrl: any;
            id: string;
            ownerUri: string;
            url: string;
            lastUpdated: string;
        }
    }
    class ManagerInsights {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerInsights.Log } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { HomeyAPI.ManagerInsights.Log[] } Successful response
         */
        getLogs(opts?: {
            filter?: HomeyAPI.ManagerInsights.Log;
        }): HomeyAPI.ManagerInsights.Log[];
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        deleteLogs(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerInsights.Log } Successful response
         */
        getLog(opts?: {
            uri: string;
            id: string;
        }): HomeyAPI.ManagerInsights.Log;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerInsights.Log } opts.log
         */
        updateLog(opts?: {
            uri: string;
            id: string;
            log: HomeyAPI.ManagerInsights.Log;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         */
        deleteLog(opts?: {
            uri: string;
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @param { string } [opts.resolution]  - The timespan to query ("lastHour" | "lastHourLowRes" | "last6Hours" | "last6HoursLowRes" | "last24Hours" | "last3Days" | "last7Days" | "last14Days" | "last31Days" | "last3Months" | "last6Months" | "last2Years" | "today" | "thisWeek" | "thisMonth" | "thisYear" | "yesterday" | "lastWeek" | "lastMonth" | "lastYear")
         * @returns { object } Successful response
         */
        getLogEntries(opts?: {
            uri: string;
            id: string;
            resolution?: string;
        }): any;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         */
        deleteLogEntries(opts?: {
            uri: string;
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @since 1.5.0
         * @param {object} [opts] - Named parameters
         */
        getStorageInfo(opts?: any): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerInsights {
        /**
         *
         * @memberof HomeyAPI.ManagerInsights
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerInsights
         * @property { string } uri
         * @property { string } id
         * @property { string } title
         * @property { string } type  ("number" | "boolean")
         * @property { string } units
         * @property { number } decimals
         * @property { number } lastValue
         * @hideconstructor
         */
        class Log {
            uri: string;
            id: string;
            title: string;
            /**
             * ("number" | "boolean")
            */
            type: string;
            units: string;
            decimals: number;
            lastValue: number;
        }
    }
    class ManagerLedring {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getScreensavers(opts?: any): void;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { object } The state of this manager
         */
        getState(opts?: any): any;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { number } opts.value
         */
        setOptionBrightness(opts?: {
            value: number;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionBrightness(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.value
         * @param { string } opts.value.uri
         * @param { string } opts.value.id
         */
        setOptionScreensaver(opts?: {
            value: {
                uri: string;
                id: string;
            };
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionScreensaver(opts?: any): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerLedring {
        /**
         *
         * @memberof HomeyAPI.ManagerLedring
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerLogic {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerLogic.Variable } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerLogic.Variable> } Successful response
         */
        getVariables(opts?: {
            filter?: HomeyAPI.ManagerLogic.Variable;
        }): {
            [key: string]: HomeyAPI.ManagerLogic.Variable;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerLogic.Variable } Successful response
         */
        getVariable(opts?: {
            id: string;
        }): HomeyAPI.ManagerLogic.Variable;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerLogic.Variable } opts.variable
         * @returns { HomeyAPI.ManagerLogic.Variable } Successful response
         */
        updateVariable(opts?: {
            id: string;
            variable: HomeyAPI.ManagerLogic.Variable;
        }): HomeyAPI.ManagerLogic.Variable;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteVariable(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerLogic.Variable } opts.variable
         * @returns { HomeyAPI.ManagerLogic.Variable } Successful response
         */
        createVariable(opts?: {
            variable: HomeyAPI.ManagerLogic.Variable;
        }): HomeyAPI.ManagerLogic.Variable;
        /**
         *
         * @param {object} [opts] - Named parameters
         * @param { object } [opts.event]
         * @param { object } [opts.tag]
         */
        triggerWebhook(opts?: {
            event?: any;
            tag?: any;
        }): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerLogic {
        /**
         *
         * @memberof HomeyAPI.ManagerLogic
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerLogic
         * @property { string } id
         * @property { string } name
         * @property { string } type  ("string" | "number" | "boolean")
         * @property { object } value Should be the same type as defined in the `type` property.
         * @hideconstructor
         */
        class Variable {
            id: string;
            name: string;
            /**
             * ("string" | "number" | "boolean")
            */
            type: string;
            /**
             * Should be the same type as defined in the `type` property.
            */
            value: any;
        }
    }
    class ManagerMobile {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         *  - homey.flow.readonly<br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getSummary(opts?: any): void;
    }
    namespace ManagerMobile {
        /**
         *
         * @memberof HomeyAPI.ManagerMobile
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerNotifications {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerNotifications.Notification } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerNotifications.Notification> } Successful response
         */
        getNotifications(opts?: {
            filter?: HomeyAPI.ManagerNotifications.Notification;
        }): {
            [key: string]: HomeyAPI.ManagerNotifications.Notification;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerNotifications.Notification } Successful response
         */
        getNotification(opts?: {
            id: string;
        }): HomeyAPI.ManagerNotifications.Notification;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteNotification(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        setNotificationRead(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.ownerUri]
         */
        deleteNotifications(opts?: {
            ownerUri?: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOwners(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { boolean } opts.enabled
         */
        setOwnerEnabled(opts?: {
            uri: string;
            enabled: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { boolean } opts.push
         */
        setOwnerPush(opts?: {
            uri: string;
            push: boolean;
        }): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerNotifications {
        /**
         *
         * @memberof HomeyAPI.ManagerNotifications
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerNotifications
         * @property { string } id
         * @property { string } ownerUri
         * @property { object } dateCreated
         * @property { string } dateExpires
         * @property { string } excerpt
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { string } priority
         * @property { string[] } readBy
         * @property { string[] } roles
         * @property { object } meta Free-form metadata of the notification
         * @hideconstructor
         */
        class Notification {
            id: string;
            ownerUri: string;
            dateCreated: any;
            dateExpires: string;
            excerpt: string;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            priority: string;
            readBy: string[];
            roles: string[];
            /**
             * Free-form metadata of the notification
            */
            meta: any;
        }
    }
    class ManagerPresence {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        getPresent(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { boolean } [opts.value]
         */
        setPresent(opts?: {
            id: string;
            value?: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } [opts.value]
         */
        setPresentMe(opts?: {
            value?: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        getAsleep(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { boolean } [opts.value]
         */
        setAsleep(opts?: {
            id: string;
            value?: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } [opts.value]
         */
        setAsleepMe(opts?: {
            value?: boolean;
        }): void;
    }
    namespace ManagerPresence {
        /**
         *
         * @memberof HomeyAPI.ManagerPresence
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerReminder {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.reminder.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getReminders(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.reminder<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.reminder
         */
        createReminder(opts?: {
            reminder: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.reminder.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        getReminder(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.reminder<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } opts.reminder
         */
        updateReminder(opts?: {
            id: string;
            reminder: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.reminder<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteReminder(opts?: {
            id: string;
        }): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerReminder {
        /**
         *
         * @memberof HomeyAPI.ManagerReminder
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerReminder
         * @property { string } id
         * @property { string } name
         * @property { object } date
         * @property { string } trigger
         * @property { string } action
         * @hideconstructor
         */
        class Reminder {
            id: string;
            name: string;
            date: any;
            trigger: string;
            action: string;
        }
    }
    class ManagerReports {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        getMonthlyReport(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getMonthlyReportSummary(opts?: any): void;
    }
    namespace ManagerReports {
        /**
         *
         * @memberof HomeyAPI.ManagerReports
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerRF {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { number } [opts.timeout]
         * @param { string } [opts.frequency]  -  ("433" | "868" | "ir")
         */
        record(opts?: {
            timeout?: number;
            frequency?: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.frequency]  -  ("433" | "868" | "ir")
         * @param { number[] } [opts.data]
         */
        emulate(opts?: {
            frequency?: string;
            data?: number[];
        }): void;
    }
    namespace ManagerRF {
        /**
         *
         * @memberof HomeyAPI.ManagerRF
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerSessions {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerSessions.Session } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerSessions.Session> } Successful response
         */
        getSessions(opts?: {
            filter?: HomeyAPI.ManagerSessions.Session;
        }): {
            [key: string]: HomeyAPI.ManagerSessions.Session;
        };
        /**
         *
         * @param {object} [opts] - Named parameters
         * @returns { HomeyAPI.ManagerSessions.Session } Successful response
         */
        getSessionMe(opts?: any): HomeyAPI.ManagerSessions.Session;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteSession(opts?: {
            id: string;
        }): void;
    }
    namespace ManagerSessions {
        /**
         *
         * @memberof HomeyAPI.ManagerSessions
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerSessions
         * @property { string } id
         * @property { string } type  ("OAUTH" | "APP")
         * @property { string } agent
         * @property { string[] } scopes These are the requested scopes
         * @property { string[] } intersectedScopes These are the actual available scopes. This is an intersection between the requested scopes and the user's scopes.
         * @property { string } createdAt
         * @property { string } expiresAt
         * @property { boolean } lastUsed
         * @hideconstructor
         */
        class Session {
            /**
             * Checks if this session has a scope
             * @param {string} scope - The required scope
             * @return {boolean} true if the scope is available, false otherwise
             */
            hasScope(scope: string): boolean;
            /**
             * Checks if this session has all of the supplied scopes
             * @param {string[]} scopes - A list of required scopes
             * @return {boolean} true if the scopes are available, false otherwise
             */
            hasScopes(scopes: string[]): boolean;
            id: string;
            /**
             * ("OAUTH" | "APP")
            */
            type: string;
            agent: string;
            /**
             * These are the requested scopes
            */
            scopes: string[];
            /**
             * These are the actual available scopes. This is an intersection between the requested scopes and the user's scopes.
            */
            intersectedScopes: string[];
            createdAt: string;
            expiresAt: string;
            lastUsed: boolean;
        }
    }
    class ManagerSpeechInput {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.speech<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.transcript
         * @param { number } [opts.confidence]
         * @param { string } [opts.session]
         * @param { boolean } [opts.synthesize]
         * @param { object[] } [opts.words]
         * @param { object } [opts.waitForAnswer]
         */
        parseSpeech(opts?: {
            transcript: string;
            confidence?: number;
            session?: string;
            synthesize?: boolean;
            words?: object[];
            waitForAnswer?: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.speech<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.text
         * @param { string } [opts.session]
         * @param { boolean } [opts.synthesize]
         * @param { number } [opts.timeout]
         */
        ask(opts?: {
            text: string;
            session?: string;
            synthesize?: boolean;
            timeout?: number;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.speech<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.session
         * @param { string } [opts.transcript]
         */
        askResponse(opts?: {
            session: string;
            transcript?: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.speech<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.text
         * @param { string } [opts.session]
         * @param { number } [opts.timeout]
         */
        confirm(opts?: {
            text: string;
            session?: string;
            timeout?: number;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.speech<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getHistory(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.speech<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getSpeechAgents(opts?: any): void;
    }
    namespace ManagerSpeechInput {
        /**
         *
         * @memberof HomeyAPI.ManagerSpeechInput
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerSpeechOutput {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.speech<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.text
         * @param { string } [opts.session]
         * @param { number } [opts.timeout]
         * @param { boolean } [opts.synthesize]
         */
        say(opts?: {
            text: string;
            session?: string;
            timeout?: number;
            synthesize?: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerSpeechOutput.Voice } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerSpeechOutput.Voice> } Successful response
         */
        getVoices(opts?: {
            filter?: HomeyAPI.ManagerSpeechOutput.Voice;
        }): {
            [key: string]: HomeyAPI.ManagerSpeechOutput.Voice;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerSpeechOutput.Voice } Successful response
         */
        getVoice(opts?: {
            id: string;
        }): HomeyAPI.ManagerSpeechOutput.Voice;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        uninstallVoice(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        installVoice(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        playVoiceSample(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value  -  ("very_slow" | "slow" | "normal" | "fast" | "very_fast")
         */
        setOptionSpeed(opts?: {
            value: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionSpeed(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value
         */
        setOptionVoice(opts?: {
            value: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getOptionVoice(opts?: any): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerSpeechOutput {
        /**
         *
         * @memberof HomeyAPI.ManagerSpeechOutput
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerSpeechOutput
         * @property { string } id
         * @property { string } name
         * @property { string } language
         * @property { string } locale
         * @property { string } gender  ("male" | "female")
         * @hideconstructor
         */
        class Voice {
            id: string;
            name: string;
            language: string;
            locale: string;
            /**
             * ("male" | "female")
            */
            gender: string;
        }
    }
    class ManagerSystem {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getInfo(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getSystemName(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.name
         */
        setSystemName(opts?: {
            name: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getStorageInfo(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getMemoryInfo(opts?: any): void;
        /**
         *
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.append]
         */
        sendLog(opts?: {
            append?: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        reboot(opts?: any): void;
        /**
         *
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.id]  - The Cloud ID of the Homey you are trying to reach
         */
        ping(opts?: {
            id?: string;
        }): void;
        /**
         * Sets a custom debug mask (overrides default)
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.mask
         * @protected
         */
        protected setDebug(opts?: {
            mask: string;
        }): void;
    }
    namespace ManagerSystem {
        /**
         *
         * @memberof HomeyAPI.ManagerSystem
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerUpdates {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected getWhatsNew(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @protected
         */
        protected setWhatsNewRead(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } [opts.cache]
         * @param { string } [opts.flags]
         * @protected
         */
        protected getUpdates(opts?: {
            cache?: boolean;
            flags?: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected installUpdate(opts?: any): void;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { object } The state of this manager
         * @protected
         */
        protected getState(opts?: any): any;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value  -  ("stable" | "beta")
         * @protected
         */
        protected setOptionChannel(opts?: {
            value: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected getOptionChannel(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } opts.value
         * @protected
         */
        protected setOptionAutoupdate(opts?: {
            value: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected getOptionAutoupdate(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value
         * @protected
         */
        protected setOptionForceChannel(opts?: {
            value: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected getOptionForceChannel(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string[] } opts.value
         * @protected
         */
        protected setOptionUpdateNotifications(opts?: {
            value: string[];
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @protected
         */
        protected getOptionUpdateNotifications(opts?: any): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerUpdates {
        /**
         *
         * @memberof HomeyAPI.ManagerUpdates
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         * @protected
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerUsers {
        /**
         * Exchange a delegation token for a session bearer token
         * @param {object} [opts] - Named parameters
         * @param { string } opts.token
         * @returns { string } A Bearer token, to be used by the authorization header
         */
        login(opts?: {
            token: string;
        }): string;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerUsers.User } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerUsers.User> } Successful response
         */
        getUsers(opts?: {
            filter?: HomeyAPI.ManagerUsers.User;
        }): {
            [key: string]: HomeyAPI.ManagerUsers.User;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerUsers.User } opts.user
         */
        createUser(opts?: {
            user: HomeyAPI.ManagerUsers.User;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { HomeyAPI.ManagerUsers.User } Successful response
         */
        getUserMe(opts?: any): HomeyAPI.ManagerUsers.User;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } [opts.name]
         * @param { object } [opts.email]
         * @returns { HomeyAPI.ManagerUsers.User } Successful response
         */
        updateUserMe(opts?: {
            name?: any;
            email?: any;
        }): HomeyAPI.ManagerUsers.User;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        deleteUserMe(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerUsers.User } Successful response
         */
        getUser(opts?: {
            id: string;
        }): HomeyAPI.ManagerUsers.User;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerUsers.User } opts.user
         * @returns { HomeyAPI.ManagerUsers.User } Successful response
         */
        updateUser(opts?: {
            id: string;
            user: HomeyAPI.ManagerUsers.User;
        }): HomeyAPI.ManagerUsers.User;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteUser(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } opts.value
         */
        updateUserMeProperties(opts?: {
            id: string;
            value: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteUserMeProperties(opts?: {
            id: string;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.newOwnerUserId
         */
        swapOwner(opts?: {
            newOwnerUserId: string;
        }): void;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { object } The state of this manager
         */
        getState(opts?: any): any;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerUsers {
        /**
         *
         * @memberof HomeyAPI.ManagerUsers
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerUsers
         * @property { string } id
         * @property { string } name
         * @property { string } athomId
         * @property { object } properties
         * @property { boolean } enabled
         * @property { boolean } verified
         * @property { string } role  ("manager" | "user" | "guest")
         * @property { boolean } present
         * @property { boolean } asleep
         * @hideconstructor
         */
        class User {
            id: string;
            name: string;
            athomId: string;
            properties: any;
            enabled: boolean;
            verified: boolean;
            /**
             * ("manager" | "user" | "guest")
            */
            role: string;
            present: boolean;
            asleep: boolean;
        }
    }
    class ManagerWeather {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getWeather(opts?: any): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerWeather {
        /**
         *
         * @memberof HomeyAPI.ManagerWeather
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerZigBee {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.command
         * @param { object } [opts.opts]
         */
        runCommand(opts?: {
            command: string;
            opts?: any;
        }): void;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { object } The state of this manager
         */
        getState(opts?: any): any;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerZigBee {
        /**
         *
         * @memberof HomeyAPI.ManagerZigBee
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerZones {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerZones.Zone } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Object.<string, HomeyAPI.ManagerZones.Zone> } Successful response
         */
        getZones(opts?: {
            filter?: HomeyAPI.ManagerZones.Zone;
        }): {
            [key: string]: HomeyAPI.ManagerZones.Zone;
        };
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerZones.Zone } opts.zone
         */
        createZone(opts?: {
            zone: HomeyAPI.ManagerZones.Zone;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { HomeyAPI.ManagerZones.Zone } Successful response
         */
        getZone(opts?: {
            id: string;
        }): HomeyAPI.ManagerZones.Zone;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerZones.Zone } opts.zone
         */
        updateZone(opts?: {
            id: string;
            zone: HomeyAPI.ManagerZones.Zone;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         */
        deleteZone(opts?: {
            id: string;
        }): void;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerZones {
        /**
         *
         * @memberof HomeyAPI.ManagerZones
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerZones
         * @property { string } id
         * @property { string } name
         * @property { number } order
         * @property { string } parent
         * @property { boolean } active
         * @property { string } icon  ("default" | "bed" | "books" | "garden" | "home" | "kitchen" | "living" | "roof" | "shower" | "stairs-down" | "stairs-up" | "toilet")
         * @hideconstructor
         */
        class Zone {
            id: string;
            name: string;
            order: number;
            parent: string;
            active: boolean;
            /**
             * ("default" | "bed" | "books" | "garden" | "home" | "kitchen" | "living" | "roof" | "shower" | "stairs-down" | "stairs-up" | "toilet")
            */
            icon: string;
        }
    }
    class ManagerZwave {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.command
         * @param { object } [opts.opts]
         */
        runCommand(opts?: {
            command: string;
            opts?: any;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @since 1.5.6
         * @param {object} [opts] - Named parameters
         * @param { boolean } opts.enabled
         */
        setLogEnabled(opts?: {
            enabled: boolean;
        }): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         */
        getLog(opts?: any): void;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.region  -  ("ANZ" | "CN" | "EU" | "HK" | "IL" | "IN" | "JP" | "KR" | "RU" | "US")
         */
        updateRegion(opts?: {
            region: string;
        }): void;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { object } The state of this manager
         */
        getState(opts?: any): any;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerZwave {
        /**
         *
         * @memberof HomeyAPI.ManagerZwave
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
}

/**
 * Represents the Athom Apps API
 * @param {object} [opts] - An options object
 * @param {string} [opts.secret] - Authorization secret
 * @param {string} [opts.baseUrl] - A custom baseUrl
 */
declare class AthomAppsAPI {
    constructor(opts?: {
        secret?: string;
        baseUrl?: string;
    });
    /**
     * Update an archive
     * @param {object} [opts] - Named parameters
     * @param { string } opts.archiveId
     * @param { string } opts.state
     * @param { string } [opts.error]
     * @param { object } [opts.manifest]
     * @param { string } [opts.assetsId]
     * @param { string } [opts.hash]
     * @param { number } [opts.size]
     * @protected
     */
    protected updateArchive(opts?: {
        archiveId: string;
        state: string;
        error?: string;
        manifest?: any;
        assetsId?: string;
        hash?: string;
        size?: number;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { number } [opts.page]
     * @param { number } [opts.count]
     * @param { string } [opts.category]
     * @param { string } [opts.author]
     * @returns { object[] } Success
     * @protected
     */
    protected getApps(opts?: {
        page?: number;
        count?: number;
        category?: string;
        author?: string;
    }): object[];
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.query
     * @param { string } [opts.language]
     * @param { string } [opts.homeyVersion]
     * @returns { object[] } Success
     * @protected
     */
    protected searchApps(opts?: {
        query: string;
        language?: string;
        homeyVersion?: string;
    }): object[];
    /**
     *
     * @param {object} [opts] - Named parameters
     * @returns { object[] } Success
     * @protected
     */
    protected syncApps(opts?: any): object[];
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.secret
     * @returns { object } Success
     * @protected
     */
    protected getAppsSummary(opts?: {
        secret: string;
    }): any;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected getHighlightedApps(opts?: any): any;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @returns { object[] } Success
     * @protected
     */
    protected getMyApps(opts?: any): object[];
    /**
     *
     * @param {object} [opts] - Named parameters
     * @returns { object[] } Success
     * @protected
     */
    protected getReviewApps(opts?: any): object[];
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { AthomAppsAPI.App } Success
     * @protected
     */
    protected getApp(opts?: {
        appId: string;
    }): AthomAppsAPI.App;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @protected
     */
    protected deleteApp(opts?: {
        appId: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.userId  - The User ID of the new author.
     * @protected
     */
    protected updateAppAuthor(opts?: {
        appId: string;
        userId: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.channel
     * @param { string } opts.secret
     * @returns { object } Success
     * @protected
     */
    protected getAppInstall(opts?: {
        appId: string;
        channel: string;
        secret: string;
    }): any;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { AthomAppsAPI.Build[] } Success
     * @protected
     */
    protected getBuilds(opts?: {
        appId: string;
    }): AthomAppsAPI.Build[];
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.version
     * @param { object } opts.env
     * @param { object } opts.changelog
     * @param { string } opts.changelog.en
     * @param { object } opts.readme
     * @param { string } opts.readme.en
     * @returns { object } Success
     * @protected
     */
    protected createBuild(opts?: {
        appId: string;
        version: string;
        env: any;
        changelog: {
            en: string;
        };
        readme: {
            en: string;
        };
    }): any;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @returns { AthomAppsAPI.Build } Success
     * @protected
     */
    protected getBuild(opts?: {
        appId: string;
        buildId: string;
    }): AthomAppsAPI.Build;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @protected
     */
    protected getCrashes(opts?: {
        appId: string;
        buildId: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @param { string } opts.channel
     * @protected
     */
    protected updateBuildChannel(opts?: {
        appId: string;
        buildId: string;
        channel: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @param { boolean } opts.autoRelease
     * @protected
     */
    protected createSubmission(opts?: {
        appId: string;
        buildId: string;
        autoRelease: boolean;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @protected
     */
    protected getSubmissionComments(opts?: {
        appId: string;
        buildId: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @param { string } opts.text
     * @protected
     */
    protected createSubmissionComment(opts?: {
        appId: string;
        buildId: string;
        text: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @protected
     */
    protected retractSubmission(opts?: {
        appId: string;
        buildId: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @protected
     */
    protected approveSubmission(opts?: {
        appId: string;
        buildId: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @protected
     */
    protected rejectSubmission(opts?: {
        appId: string;
        buildId: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { AthomAppsAPI.Review[] } Success
     * @protected
     */
    protected getReviews(opts?: {
        appId: string;
    }): AthomAppsAPI.Review[];
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.version
     * @param { number } opts.rating
     * @param { string } [opts.comment]
     * @returns { object } Success
     * @protected
     */
    protected updateReview(opts?: {
        appId: string;
        version: string;
        rating: number;
        comment?: string;
    }): any;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { object } Success
     * @protected
     */
    protected deleteReview(opts?: {
        appId: string;
    }): any;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { object } Success
     * @protected
     */
    protected deleteAllReviews(opts?: {
        appId: string;
    }): any;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.userId
     * @param { string } opts.response
     * @protected
     */
    protected updateReviewResponse(opts?: {
        appId: string;
        userId: string;
        response: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.userId
     * @protected
     */
    protected deleteReviewResponse(opts?: {
        appId: string;
        userId: string;
    }): void;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.homeyId
     * @param { string } opts.homeyVersion
     * @param { string } opts.appVersion
     * @param { string } opts.stack
     * @protected
     */
    protected createCrash(opts?: {
        appId: string;
        homeyId: string;
        homeyVersion: string;
        appVersion: string;
        stack: string;
    }): void;
}

/**
 * Represents the Athom Backup API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomBackupAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get all of your own backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @returns { object } Success
     * @protected
     */
    protected getMyBackups(opts?: {
        token: string;
    }): any;
    /**
     * Delete one of your own backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.backupId
     * @param { string } opts.token
     * @returns { object } Success
     * @protected
     */
    protected deleteMyBackup(opts?: {
        homeyId: string;
        backupId: string;
        token: string;
    }): any;
    /**
     * Get all of a user's backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @param { string } opts.secret
     * @returns { object } Success
     * @protected
     */
    protected getBackups(opts?: {
        userId: string;
        secret: string;
    }): any;
    /**
     * Delete all of a user's backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @returns { object } Success
     * @protected
     */
    protected deleteBackups(opts?: {
        userId: string;
    }): any;
    /**
     * Get a single backup
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @param { string } opts.backupId
     * @param { string } opts.secret
     * @returns { object } Success
     * @protected
     */
    protected getBackup(opts?: {
        userId: string;
        backupId: string;
        secret: string;
    }): any;
    /**
     * Create a backup of a user's Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @param { string } opts.homeyId
     * @param { string } opts.secret
     * @param { string } opts.homeyName
     * @param { string } opts.version
     * @param { string } opts.channel
     * @returns { object } Success
     * @protected
     */
    protected createBackup(opts?: {
        userId: string;
        homeyId: string;
        secret: string;
        homeyName: string;
        version: string;
        channel: string;
    }): any;
    /**
     * Mark a backup of a user's Homey as complete
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @param { string } opts.homeyId
     * @param { string } opts.backupId
     * @param { string } opts.secret
     * @param { number } opts.size
     * @param { string } opts.hash
     * @param { object } opts.meta
     * @returns { object } Success
     * @protected
     */
    protected setBackupComplete(opts?: {
        userId: string;
        homeyId: string;
        backupId: string;
        secret: string;
        size: number;
        hash: string;
        meta: any;
    }): any;
}

/**
 * Represents the Athom Callback API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomCallbackAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Register a callback URL.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.callbackUrl  - callback URL
     * @returns { object } Success
     * @protected
     */
    protected registerCallbackUrl(opts?: {
        callbackUrl: string;
    }): any;
}

declare class AthomCloudAPI {
    constructor(opts: {
        clientId?: string;
        clientSecret?: string;
        redirectUrl?: string;
        store?: AthomStorageAdapter;
        autoRefreshTokens?: boolean;
        baseUrl?: string;
    });
    /**
     * Request a token to provide third party delegated access to the currently logged in user.
    
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.audience]  - The target audience
     * @param { object } [opts.meta]  - Metadata to add to the claim
     * @returns { string } The requested token
     * @protected
     */
    protected createDelegationToken(opts?: {
        audience?: string;
        meta?: any;
    }): string;
    /**
     * Validates a delegation token and returns its claims
    
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.token]  - The token
     * @returns { object } The claims embedded in the token
     * @protected
     */
    protected verifyDelegationToken(opts?: {
        token?: string;
    }): any;
    /**
     * Returns a public key for local token validation
     * @param {object} [opts] - Named parameters
     * @returns { string } A PEM public key
     * @protected
     */
    protected getDelegationTokenKey(opts?: any): string;
    /**
     * Get an OAuth2 access token through various grants.
    
     * @param {object} [opts] - Named parameters
     * @param { string } opts.clientId  - OAuth2 client ID.
     * @param { string } opts.clientSecret  - OAuth2 client secret.
     * @param { string } opts.grantType  - OAuth2 grant type. ("authorization_code" | "refresh_token" | "client_credentials" | "password")
     * @param { string } [opts.refreshToken]  - OAuth2 refresh token. Required when refresh_token grant is used.
     * @param { string } [opts.code]  - OAuth2 authorization_code. Required when authorization_code grant is used.
     * @param { string } [opts.username]  - Resource owner's username. Required when password grant is used.
     * @param { string } [opts.password]  - Resource owner's password. Required when password grant is used.
     * @returns { AthomCloudAPI.Token } Access token, refresh token and expiry information
     * @protected
     */
    protected getAccessToken(opts?: {
        clientId: string;
        clientSecret: string;
        grantType: string;
        refreshToken?: string;
        code?: string;
        username?: string;
        password?: string;
    }): AthomCloudAPI.Token;
    /**
     * Create a token and send it in an email to the user with which it can reset its password.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.email
     * @protected
     */
    protected forgotPassword(opts?: {
        email: string;
    }): void;
    /**
     * Add a user.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { object } opts.user  - User data.
     * @param { string } opts.user.firstname
     * @param { string } opts.user.lastname
     * @param { string } opts.user.email
     * @param { string } opts.user.password
     * @param { string } opts.user.language
     * @param { boolean } [opts.newsletter]  - Set to true to subscribe to newsletter
     * @param { boolean } [opts.gettingStarted]  - Set to false to prevent Getting Started e-mails
     * @returns { AthomCloudAPI.User } The newly created user
     */
    createUser(opts?: {
        user: {
            firstname: string;
            lastname: string;
            email: string;
            password: string;
            language: string;
        };
        newsletter?: boolean;
        gettingStarted?: boolean;
    }): AthomCloudAPI.User;
    /**
     * Get a user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - User ID.
     * @returns { AthomCloudAPI.User } User data.
     */
    getUser(opts?: {
        id: string;
    }): AthomCloudAPI.User;
    /**
     * Update a user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - User ID.
     * @param { AthomCloudAPI.User } opts.user  - User data.
     * @returns { AthomCloudAPI.User } The updated user.
     * @protected
     */
    protected updateUser(opts?: {
        id: string;
        user: AthomCloudAPI.User;
    }): AthomCloudAPI.User;
    /**
     * Delete a user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - User ID.
     * @param { string } opts.password  - The users password
     * @protected
     */
    protected deleteUser(opts?: {
        id: string;
        password: string;
    }): void;
    /**
     * Add a device to a user.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { AthomCloudAPI.UserDevice } opts.device  - Device data.
     * @returns { AthomCloudAPI.UserDevice } The created user device.
     * @protected
     */
    protected createUserDevice(opts?: {
        userId: string;
        device: AthomCloudAPI.UserDevice;
    }): AthomCloudAPI.UserDevice;
    /**
     * Update user device data.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { string } opts.deviceId  - Device ID.
     * @param { AthomCloudAPI.UserDevice } opts.device  - Device data to update.
     * @returns { AthomCloudAPI.UserDevice } The updated device.
     */
    updateUserDevice(opts?: {
        userId: string;
        deviceId: string;
        device: AthomCloudAPI.UserDevice;
    }): AthomCloudAPI.UserDevice;
    /**
     * Delete user device data.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { string } opts.deviceId  - Device ID.
     */
    deleteUserDevice(opts?: {
        userId: string;
        deviceId: string;
    }): void;
    /**
     * Get user addresses
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @returns { AthomCloudAPI.UserAddress[] } All known user addresses.
     * @protected
     */
    protected getUserAdresses(opts?: {
        userId: string;
    }): AthomCloudAPI.UserAddress[];
    /**
     * Add user address
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - Homey ID.
     * @param { AthomCloudAPI.UserAddress } [opts.address]  - User data.
     * @returns { AthomCloudAPI.UserAddress } The newly created user address.
     * @protected
     */
    protected addUserAddress(opts?: {
        userId: string;
        address?: AthomCloudAPI.UserAddress;
    }): AthomCloudAPI.UserAddress;
    /**
     * Update user address
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - Homey ID.
     * @param { string } opts.addressId  - Address ID.
     * @param { AthomCloudAPI.UserAddress } [opts.address]  - Address data.
     * @returns { AthomCloudAPI.UserAddress } The updated user address.
     * @protected
     */
    protected updateUserAddress(opts?: {
        userId: string;
        addressId: string;
        address?: AthomCloudAPI.UserAddress;
    }): AthomCloudAPI.UserAddress;
    /**
     * Delete a user address
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { string } opts.addressId  - Address ID.
     * @protected
     */
    protected deleteUserAdress(opts?: {
        userId: string;
        addressId: string;
    }): void;
    /**
     * Update user subscription
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.subscription:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - Homey ID.
     * @param { string } opts.subscriptionId  - Subscription ID.
     * @param { AthomCloudAPI.UserSubscription } [opts.subscription]
     * @protected
     */
    protected updateUserSubscription(opts?: {
        userId: string;
        subscriptionId: string;
        subscription?: AthomCloudAPI.UserSubscription;
    }): void;
    /**
     * Delete a user subscription
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.subscription:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { string } opts.subscriptionId  - Subscription ID.
     * @protected
     */
    protected deleteUserSubscription(opts?: {
        userId: string;
        subscriptionId: string;
    }): void;
    /**
     * User associated with provided credentials.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.readonly<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.additionalScopes]  - Comma seperated list of additional scopes to require.
     * @returns { AthomCloudAPI.User } Associated user account
     */
    getAuthenticatedUser(opts?: {
        additionalScopes?: string;
    }): AthomCloudAPI.User;
    /**
     * Change the password of the authenticated user and invalidates all oAuth2 sessions.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.password
     * @param { string } opts.oldPassword
     * @protected
     */
    protected updateAuthenticatedUserPassword(opts?: {
        password: string;
        oldPassword: string;
    }): void;
    /**
     * Get user data
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID or E-mail.
     * @returns { AthomCloudAPI.UserProfile } User profile
     * @protected
     */
    protected getUserProfile(opts?: {
        userId: string;
    }): AthomCloudAPI.UserProfile;
    /**
     * Obtain a list of Bridges
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge.readonly:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.serial]  - Unique Serial Number
     * @returns { AthomCloudAPI.Bridge[] } An Array of Bridges
     * @protected
     */
    protected getBridges(opts?: {
        serial?: string;
    }): AthomCloudAPI.Bridge[];
    /**
     * Create a new Bridge
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { AthomCloudAPI.Bridge } [opts.bridge]  - Bridge
     * @returns { AthomCloudAPI.Bridge } The newly created Bridge
     * @protected
     */
    protected createBridge(opts?: {
        bridge?: AthomCloudAPI.Bridge;
    }): AthomCloudAPI.Bridge;
    /**
     * Get a Bridge
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { object } opts.serial  - Unique Serial Number
     * @returns { AthomCloudAPI.Bridge } A Bridge
     * @protected
     */
    protected getBridge(opts?: {
        serial: any;
    }): AthomCloudAPI.Bridge;
    /**
     * Update a Bridge
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.serial  - Unique Serial Number
     * @param { AthomCloudAPI.Bridge } [opts.bridge]  - Bridge
     * @returns { AthomCloudAPI.Bridge } The updated Bridge
     * @protected
     */
    protected updateBridge(opts?: {
        serial: string;
        bridge?: AthomCloudAPI.Bridge;
    }): AthomCloudAPI.Bridge;
    /**
     * Obtain a list of Homeys (paginated by 100 results)
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.readonly<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.serial]  - Homey SN.
     * @param { string } [opts.softwareVersion]  - Homey software version.
     * @param { string } [opts.search]  - Freetext search
     * @param { string } [opts.page]  - The page
     * @returns { AthomCloudAPI.Homey[] } An Array of Homeys
     * @protected
     */
    protected getHomeys(opts?: {
        serial?: string;
        softwareVersion?: string;
        search?: string;
        page?: string;
    }): AthomCloudAPI.Homey[];
    /**
     * Create a new homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { AthomCloudAPI.Homey } [opts.data]  - Homey data.
     * @returns { AthomCloudAPI.Homey } The newly created Homey
     * @protected
     */
    protected createHomey(opts?: {
        data?: AthomCloudAPI.Homey;
    }): AthomCloudAPI.Homey;
    /**
     * Get a single homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - Homey Cloud ID.
     * @returns { AthomCloudAPI.Homey } Homey data
     * @protected
     */
    protected getHomey(opts?: {
        id: string;
    }): AthomCloudAPI.Homey;
    /**
     * Update a Homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - The Homey Cloud ID.
     * @param { AthomCloudAPI.Homey } opts.homey  - Homey data to update.
     * @returns { AthomCloudAPI.Homey } The updated Homey
     */
    updateHomey(opts?: {
        id: string;
        homey: AthomCloudAPI.Homey;
    }): AthomCloudAPI.Homey;
    /**
     * Delete a homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - Homey Cloud ID.
     * @protected
     */
    protected deleteHomey(opts?: {
        id: string;
    }): void;
    /**
     * Create a Homey user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey Cloud ID.
     * @param { string } opts.user  - User ID.
     * @param { string } opts.role  - Role on Homey. ("regular" | "owner")
     * @param { string } [opts.token]  - User token.
     * @protected
     */
    protected createHomeyUser(opts?: {
        homeyId: string;
        user: string;
        role: string;
        token?: string;
    }): void;
    /**
     * Delete a Homey user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.userId  - User ID.
     * @protected
     */
    protected deleteHomeyUser(opts?: {
        homeyId: string;
        userId: string;
    }): void;
    /**
     * Delete all Homey users
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @protected
     */
    protected resetHomeyUsers(opts?: {
        homeyId: string;
    }): void;
    /**
     * Get all Homey associated metadata
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @returns { object } Object with all metadata as key-value pairs
     * @protected
     */
    protected getAllHomeyMetadata(opts?: {
        homeyId: string;
    }): any;
    /**
     * Get Homey metadata
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.metadata:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.key  - Metadata key.
     * @returns { object } Metadata value
     * @protected
     */
    protected getHomeyMetadata(opts?: {
        homeyId: string;
        key: string;
    }): any;
    /**
     * Add Homey metadata
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.metadata:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.key  - Metadata key.
     * @param { object } [opts.value]  - Metadata value.
     * @protected
     */
    protected createHomeyMetadata(opts?: {
        homeyId: string;
        key: string;
        value?: any;
    }): void;
    /**
     * Update Homey metadata
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.metadata:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.key  - Metadata key.
     * @param { object } [opts.value]  - Metadata value.
     * @returns { AthomCloudAPI.HomeyMetadata } All metadata.
     * @protected
     */
    protected updateHomeyMetadata(opts?: {
        homeyId: string;
        key: string;
        value?: any;
    }): AthomCloudAPI.HomeyMetadata;
    /**
     * Delete Homey associated metadata
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.metadata:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.key  - Metadata key.
     * @protected
     */
    protected deleteHomeyMetadata(opts?: {
        homeyId: string;
        key: string;
    }): void;
    /**
     * Send formatted email through Athom's mail servers
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - email.send<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.to  - Delivery email address.
     * @param { string } [opts.from]  - Sender email address (and optionally display name).
     * @param { string } opts.subject  - Email subject.
     * @param { string } opts.body  - Email body.
     * @param { string } [opts.replyTo]  - Reply-to email address.
     * @param { object } [opts.header]
     * @param { string } [opts.header.url]
     * @param { string } [opts.header.title]
     * @param { string } [opts.header.prefix]
     * @param { object } [opts.button]
     * @param { string } [opts.button.url]
     * @param { string } [opts.button.title]
     * @protected
     */
    protected sendFormattedEmail(opts?: {
        to: string;
        from?: string;
        subject: string;
        body: string;
        replyTo?: string;
        header?: {
            url?: string;
            title?: string;
            prefix?: string;
        };
        button?: {
            url?: string;
            title?: string;
        };
    }): void;
    /**
     *
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.statistics<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @returns { object[] } Locations
     * @protected
     */
    protected getLocationStatistics(opts?: any): object[];
    /**
     * Obtain a list of Homeys
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.statistics<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @returns { Object.<string, number> } version to count map
     * @protected
     */
    protected getVersionStatistics(opts?: any): {
        [key: string]: number;
    };
    /**
     * Obtain a list of Homeys
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.statistics<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.min]  - lower date boundary (ISO)
     * @param { string } [opts.max]  - upper date boundary (ISO)
     * @returns { Object.<string, number> } date to count map (per hour)
     * @protected
     */
    protected getProductionStatistics(opts?: {
        min?: string;
        max?: string;
    }): {
        [key: string]: number;
    };
    /**
     * Obtain a list of owner emails for Homeys
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.statistics<br/>
     *  - account.user.readonly:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.softwareVersion]  - Homey Software Version
     * @param { string } [opts.homeyId]
     * @param { string } [opts.homeySn]
     * @param { string } [opts.barcodeMin]
     * @param { string } [opts.barcodeMax]
     * @param { string } [opts.appId]
     * @param { string } [opts.appChannel]
     * @param { string } [opts.appVersion]
     * @param { number } [opts.page]  - page number
     * @returns { object[] } list of homey owner details (paginated)
     * @protected
     */
    protected getHomeyOwnerContactDetails(opts?: {
        softwareVersion?: string;
        homeyId?: string;
        homeySn?: string;
        barcodeMin?: string;
        barcodeMax?: string;
        appId?: string;
        appChannel?: string;
        appVersion?: string;
        page?: number;
    }): object[];
    /**
     * A cached version of {@link AthomCloudAPI#getAuthenticatedUser getAuthenticatedUser}.<br/>
     *
     * If no cached version is available, this call invokes {@link AthomCloudAPI#getAuthenticatedUser getAuthenticatedUser}.<br/>
     *
     * The cached version only contains a subset of the {@link AthomCloudAPI.User} properties,
     * and has a <tt>_cached: true</tt> property to indicate the User might be outdated.
     * @returns {AthomCloudAPI.User}
     */
    getAuthenticatedUserCached(): AthomCloudAPI.User;
    /**
     * Returns true if the user is logged in, false otherwise.
     * Attempts to refresh tokens if needed.
     * @returns {boolean}
     */
    isLoggedIn(): boolean;
    /**
     * Logs out from the Athom API
     * @param {AthomCloudAPI.Token} token - An OAuth2 auth token object
     * @fires AthomCloudAPI#logout
     */
    logout(token: AthomCloudAPI.Token): void;
    /**
     * Sets the authentication status of the API
     * @param {AthomCloudAPI.Token} token - An OAuth2 auth token object
     * @return {AthomCloudAPI.Token} The (possibly refreshed) authTokens object or null if the token was invalid
     * @fires AthomCloudAPI#logout
     */
    setToken(token: AthomCloudAPI.Token): AthomCloudAPI.Token;
    /**
     * Authenticate using a username and password
     * @param {string} username
     * @param {string} password
     * @return {AthomCloudAPI.Token} The authState object
     * @protected
     */
    protected authenticateWithPassword(username: string, password: string): AthomCloudAPI.Token;
    /**
     * Returns true if an authorization code is present
     * @returns {boolean} true if an authorization code is present as query parameter
     */
    hasAuthorizationCode(): boolean;
    /**
     * Returns true if a delegated login is present. If true, getLoginUrl() will return an url that automatically authenticates the delegated user.
     * @returns {boolean} true if a delegtion token is present as query parameter
     */
    hasDelegatedLogin(): boolean;
    /**
     * Authenticate using an oauth2 authorizationCode
     * @param {string} [authorizationCode]
     * @return {AthomCloudAPI.Token} The authState object
     */
    authenticateWithAuthorizationCode(authorizationCode?: string): AthomCloudAPI.Token;
    /**
     * Authenticate using client-credentials only
     * @return {AthomCloudAPI.Token} The authState object
     */
    authenticateWithClientCredentials(): AthomCloudAPI.Token;
    /**
     * Returns an URL to a third party service with appended preselection options
     * @param {object} opts - options
     * @param {string} opts.baseUrl - The URL to the third party service
     * @param {string} [opts.resource] - Requested Resource (if already known)
     * @param {string} [opts.state] - The oAuth state parameter for the third party service (if required)
     * @param {string} [opts.audience] - The delegation audience (if required)
     * @param {string} [opts.meta] - The delegation claim metadata (if required)
     * @return {string} Url to the login page
     */
    getDelegatedLoginUrl(opts: {
        baseUrl: string;
        resource?: string;
        state?: string;
        audience?: string;
        meta?: string;
    }): string;
    /**
     * Returns an URL to the OAuth2 login page
     * @param {object} [opts] - options
     * @param {string[]} [opts.scopes] - Requested Scopes (if subset from client scopes)
     * @param {string} [opts.resource] - Requested Resource (if already known)
     * @param {string} [opts.state] - State query parameter provided to callback
     * @param {string} [opts.userToken] - User Delegation token to skip selection of users
     * @return {string} Url to the login page
     */
    getLoginUrl(opts?: {
        scopes?: string[];
        resource?: string;
        state?: string;
        userToken?: string;
    }): string;
    /**
     * Enables automatic access token token refreshing
     */
    enableAutoRefreshTokens(): void;
    /**
     * Disables automatic access token token refreshing
     */
    disableAutoRefreshTokens(): void;
    /**
     * Force a refresh of the API tokens
     * @param {string} [token] The refresh token to use instead of the internal one.
     * @return {AthomCloudAPI.Token} The authState object
     */
    refreshTokens(token?: string): AthomCloudAPI.Token;
    /**
     * Sets the global client configuration, can be overridden
     * @param {object} opts - An options object
     * @param {string} opts.clientId - The OAuth2 clientID
     * @param {string} opts.clientSecret - The OAuth2 clientSecret
     * @param {boolean} opts.autoRefreshTokens - Set to false to disable automatic token refreshing
     */
    static setConfig(opts: {
        clientId: string;
        clientSecret: string;
        autoRefreshTokens: boolean;
    }): void;
}

declare class AthomConnectAPI {
    constructor(opts?: any);
    /**
     * Ping a Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @returns { string } Success
     * @protected
     */
    protected ping(opts?: {
        homeyId: string;
    }): string;
    /**
     * Accept a sharing request
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.athomId  - The athom user ID of the user that accepted the sharing request
     * @param { string } opts.inviteToken  - The invitation token
     * @returns { string } Success
     * @protected
     */
    protected acceptSharingRequest(opts?: {
        homeyId: string;
        athomId: string;
        inviteToken: string;
    }): string;
    /**
     * Confirm a push notification
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.pushId
     * @param { string } opts.choice  - The ID of the made choice
     * @returns { string } Success
     * @protected
     */
    protected confirmPushNotification(opts?: {
        homeyId: string;
        pushId: string;
        choice: string;
    }): string;
    /**
     * Queue a mobile event
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.homeyId]  - Use this parameter to select a specific Homey to send the message to
     * @param { string } opts.deviceId  - The device ID
     * @param { string } opts.userId  - The athom cloud User ID
     * @param { string } opts.message  - The message to send
     * @param { string } opts.signature  - The message signature
     * @returns { string } Success
     * @protected
     */
    protected sendMobileEvent(opts?: {
        homeyId?: string;
        deviceId: string;
        userId: string;
        message: string;
        signature: string;
    }): string;
    /**
     * Send an OAuth2 code to Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.code  - OAuth2 code
     * @param { string } opts.token  - OAuth2 session token
     * @returns { string } Success
     * @protected
     */
    protected sendOAuth2Callback(opts?: {
        homeyId: string;
        code: string;
        token: string;
    }): string;
    /**
     * Send a webhook to Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.webhookId
     * @param { object } opts.args  - The webhook args object
     * @returns { string } Success
     * @protected
     */
    protected sendWebhook(opts?: {
        homeyId: string;
        webhookId: string;
        args: any;
    }): string;
}

/**
 * Represents the Athom DNS API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomDNSAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get a certificate for a Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.secret
     * @returns { object } Success
     * @protected
     */
    protected getHomeyCertificate(opts?: {
        secret: string;
    }): any;
}

/**
 * Represents the Athom Firmware API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 */
declare class AthomFirmwareAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get the changelog of the most recent updates
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     */
    getUpdatesChangelog(opts?: any): any;
}

/**
 * Represents the Athom Flow API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomFlowAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Share a Flow
     * @param {object} [opts] - Named parameters
     * @param { object } opts.data
     * @returns { object } Success
     * @protected
     */
    protected shareFlow(opts?: {
        data: any;
    }): any;
    /**
     * Get a Flow
     * @param {object} [opts] - Named parameters
     * @param { string } opts.flowId
     * @returns { object } Success
     * @protected
     */
    protected getFlow(opts?: {
        flowId: string;
    }): any;
}

/**
 * Represents the Athom Geolocate API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomGeolocateAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get a Homey's geolocation
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.homeyIp
     * @param { object[] } opts.towers
     * @param { string } opts.towers.mac
     * @param { number } opts.towers.signal_level
     * @returns { object } Success
     * @protected
     */
    protected getLocation(opts?: {
        homeyId: string;
        homeyIp: string;
        towers: {
            mac: string;
            signal_level: number;
        };
    }): any;
}

/**
 * Represents the Athom Notifications API
 * @param {object} [opts] - An options object
 * @param {string} [opts.secret] - Authorization secret
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomNotificationsAPI {
    constructor(opts?: {
        secret?: string;
        baseUrl?: string;
    });
    /**
     * Send push notification.
     * @param {object} [opts] - Named parameters
     * @param { object[] } [opts.batch]  - Array of user device objects as returned from Athom API.
     * @param { object } opts.data
     * @param { string } opts.data.type
     * @param { object } opts.data.data  - Notification data (such as payload).
     * @returns { object } Success
     * @protected
     */
    protected push(opts?: {
        batch?: object[];
        data: {
            type: string;
            data: any;
        };
    }): any;
}

/**
 * Represents the Athom Setup API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomSetupAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Create a new session.
     * @param {object} [opts] - Named parameters
     * @returns { object } The generated sessionId.
     * @protected
     */
    protected createSession(opts?: any): any;
    /**
     * Get a session.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { object } Information for the session.
     * @protected
     */
    protected getSession(opts?: {
        sessionId: string;
    }): any;
    /**
     * Update a session (called by Homey).
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { object } opts.data
     * @param { string } opts.data.sn
     * @protected
     */
    protected updateSession(opts?: {
        sessionId: string;
        data: {
            sn: string;
        };
    }): void;
    /**
     * Delete a session.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @protected
     */
    protected deleteSession(opts?: {
        sessionId: string;
    }): void;
    /**
     * Get a session's Homey state.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { object } The state of the session.
     * @protected
     */
    protected getSessionState(opts?: {
        sessionId: string;
    }): any;
    /**
     * Set a session's Homey state.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { object } opts.data
     * @param { string } opts.data.state
     * @protected
     */
    protected setSessionState(opts?: {
        sessionId: string;
        data: {
            state: string;
        };
    }): void;
    /**
     * Get a session's commands.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { object } The session's commands.
     * @protected
     */
    protected getSessionCommands(opts?: {
        sessionId: string;
    }): any;
    /**
     * Create a command for this session.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { string } opts.manager
     * @param { string } opts.command
     * @param { object } [opts.args]
     * @returns { string } The commandId.
     * @protected
     */
    protected createSessionCommand(opts?: {
        sessionId: string;
        manager: string;
        command: string;
        args?: any;
    }): string;
    /**
     * Respond to a command (called by Homey).
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { string } opts.commandId
     * @param { object[] } opts.result
     * @protected
     */
    protected updateSessionCommandResponse(opts?: {
        sessionId: string;
        commandId: string;
        result: object[];
    }): void;
    /**
     * Login
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { object } opts.data
     * @param { string } opts.data.token
     * @protected
     */
    protected loginByDelegationToken(opts?: {
        sessionId: string;
        data: {
            token: string;
        };
    }): void;
    /**
     * Reset a Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { object } opts.data
     * @param { boolean } opts.data.factoryreset
     * @param { string } opts.data.name
     * @param { string } opts.data.token  - Deprecated as of Homey v2.0.0
     * @param { object } opts.data.extraProperties
     * @protected
     */
    protected updateSessionHomey(opts?: {
        sessionId: string;
        data: {
            factoryreset: boolean;
            name: string;
            token: string;
            extraProperties: any;
        };
    }): void;
    /**
     * Get a Homey's voice
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { string } opts.language
     * @returns { object } The Homey voice object
     * @protected
     */
    protected getSessionVoice(opts?: {
        sessionId: string;
        language: string;
    }): any;
    /**
     * Get a user's backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { object[] } A list of backups
     * @protected
     */
    protected getSessionBackups(opts?: {
        sessionId: string;
    }): object[];
    /**
     * Get the timezone by IP
     * @param {object} [opts] - Named parameters
     * @returns { object } The timezone
     * @protected
     */
    protected getTimezone(opts?: any): any;
}

/**
 * Represents the Athom Signals API
 * @param {object} [opts] - An options object
 * @param {string} [opts.secret] - Authorization secret
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomSignalsAPI {
    constructor(opts?: {
        secret?: string;
        baseUrl?: string;
    });
    /**
     * Search for signals by matching a query to the brand, type and name properties of the Signal.meta Object.
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.brand]  - A string to search for in brand, type or name. The search string is matched after a non-word character e.g. 'est' would not match on 'test' but will match on 'bla est'. If this parameter is provided type must also be provided!
     * @param { string } [opts.type]  - Is matched on the type or name fields of the Signal meta object. The string is matched the same way as the brand parameter. If this parameter is provided brand must also be provided!
     * @param { string } [opts.query]  - A query string which matches any of its parts (regex notation delimited by '|') to the brand, type or name field. The parts are matched the same way as the brand parameter. This parameter is only used when the brand and type parameter are not provided.
     * @returns { AthomSignalsAPI.StrippedSignal[] } Success
     * @protected
     */
    protected getSignals(opts?: {
        brand?: string;
        type?: string;
        query?: string;
    }): AthomSignalsAPI.StrippedSignal[];
    /**
     * Get a full Signal object by its id
     * @param {object} [opts] - Named parameters
     * @param { string } opts.signalId  - The ID of the Signal object requested
     * @returns { AthomSignalsAPI.Signal } Success
     * @protected
     */
    protected getSignal(opts?: {
        signalId: string;
    }): AthomSignalsAPI.Signal;
}

/**
 * Represents the Athom Store API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomStoreAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get store products
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected getProducts(opts?: any): any;
    /**
     * Get a store product
     * @param {object} [opts] - Named parameters
     * @param { string } opts.productId
     * @returns { object } Success
     * @protected
     */
    protected getProduct(opts?: {
        productId: string;
    }): any;
    /**
     * Get the cart
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected getCart(opts?: any): any;
    /**
     * Add a product to the cart
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.sku]
     * @param { number } [opts.quantity]
     * @returns { object } Success
     * @protected
     */
    protected addProductToCart(opts?: {
        sku?: string;
        quantity?: number;
    }): any;
    /**
     * Add a product to the cart
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.sku]
     * @param { number } [opts.quantity]
     * @returns { object } Success
     * @protected
     */
    protected setCartProductQuantity(opts?: {
        sku?: string;
        quantity?: number;
    }): any;
    /**
     * Remove a product from the cart
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.sku]
     * @returns { object } Success
     * @protected
     */
    protected removeProductFromCart(opts?: {
        sku?: string;
    }): any;
    /**
     * Get locales
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected getLocales(opts?: any): any;
    /**
     * Set locale
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.locale]
     * @returns { object } Success
     * @protected
     */
    protected setLocale(opts?: {
        locale?: string;
    }): any;
    /**
     * Set userdata
     * @param {object} [opts] - Named parameters
     * @param { boolean } [opts.shippingAddress]
     * @param { boolean } [opts.createAccount]
     * @param { boolean } [opts.newsletter]
     * @param { boolean } [opts.isBusiness]
     * @param { string } [opts.email]
     * @param { string } [opts.password]
     * @param { string } [opts.gender]
     * @param { string } [opts.phone]
     * @param { string } [opts.billingFirstname]
     * @param { string } [opts.billingLastname]
     * @param { string } [opts.billingStreet]
     * @param { string } [opts.billingNumber]
     * @param { string } [opts.billingZipcode]
     * @param { string } [opts.billingCity]
     * @param { string } [opts.billingCountry]
     * @param { string } [opts.billingAddressExtra]
     * @param { string } [opts.shippingFirstname]
     * @param { string } [opts.shippingLastname]
     * @param { string } [opts.shippingStreet]
     * @param { string } [opts.shippingNumber]
     * @param { string } [opts.shippingZipcode]
     * @param { string } [opts.shippingCity]
     * @param { string } [opts.shippingCountry]
     * @param { string } [opts.shippingAddressExtra]
     * @param { string } [opts.businessName]
     * @param { string } [opts.businessVat]
     * @returns { object } Success
     * @protected
     */
    protected setUserdata(opts?: {
        shippingAddress?: boolean;
        createAccount?: boolean;
        newsletter?: boolean;
        isBusiness?: boolean;
        email?: string;
        password?: string;
        gender?: string;
        phone?: string;
        billingFirstname?: string;
        billingLastname?: string;
        billingStreet?: string;
        billingNumber?: string;
        billingZipcode?: string;
        billingCity?: string;
        billingCountry?: string;
        billingAddressExtra?: string;
        shippingFirstname?: string;
        shippingLastname?: string;
        shippingStreet?: string;
        shippingNumber?: string;
        shippingZipcode?: string;
        shippingCity?: string;
        shippingCountry?: string;
        shippingAddressExtra?: string;
        businessName?: string;
        businessVat?: string;
    }): any;
    /**
     * Set business
     * @param {object} [opts] - Named parameters
     * @param { boolean } [opts.business]
     * @returns { object } Success
     * @protected
     */
    protected setBusiness(opts?: {
        business?: boolean;
    }): any;
    /**
     * Set coupon
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.coupon]
     * @returns { object } Success
     * @protected
     */
    protected setCoupon(opts?: {
        coupon?: string;
    }): any;
    /**
     * Set payment method
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.payment]
     * @returns { object } Success
     * @protected
     */
    protected setPayment(opts?: {
        payment?: string;
    }): any;
    /**
     * Create an order
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected createOrder(opts?: any): any;
    /**
     * Pay an order
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.orderId]
     * @returns { object } Success
     * @protected
     */
    protected payOrder(opts?: {
        orderId?: string;
    }): any;
    /**
     * Validate a VAT number
     * @param {object} [opts] - Named parameters
     * @param { string } opts.vat
     * @returns { boolean } Success
     * @protected
     */
    protected validateVat(opts?: {
        vat: string;
    }): boolean;
    /**
     * Get an address by zipcode
     * @param {object} [opts] - Named parameters
     * @param { string } opts.zipcode
     * @param { number } opts.number
     * @returns { object } Success
     * @protected
     */
    protected getAddressSuggestion(opts?: {
        zipcode: string;
        number: number;
    }): any;
    /**
     * Create a session
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected createSession(opts?: any): any;
    /**
     * Delete a session
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected deleteSession(opts?: any): any;
    /**
     * Get your orders
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected getOrders(opts?: any): any;
    /**
     * Get an order
     * @param {object} [opts] - Named parameters
     * @param { string } opts.orderId
     * @returns { object } Success
     * @protected
     */
    protected getOrder(opts?: {
        orderId: string;
    }): any;
    /**
     * Login
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.token]
     * @returns { object } Success
     * @protected
     */
    protected loginByDelegationToken(opts?: {
        token?: string;
    }): any;
    /**
     * Logout
     * @param {object} [opts] - Named parameters
     * @returns { object } Success
     * @protected
     */
    protected logout(opts?: any): any;
    /**
     * Verify a subscription purchase
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.token]
     * @param { string } [opts.sku]
     * @param { string } [opts.packageName]
     * @param { string } [opts.receipt]
     * @returns { object } Success
     * @protected
     */
    protected verifySubscription(opts?: {
        token?: string;
        sku?: string;
        packageName?: string;
        receipt?: string;
    }): any;
}

/**
 * Represents the Athom Webhooks API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomWebhooksAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get all Webhooks
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @returns { AthomWebhooksAPI.Webhook[] } Success
     * @protected
     */
    protected getWebhooks(opts?: {
        token: string;
    }): AthomWebhooksAPI.Webhook[];
    /**
     * Create a Webhook
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @param { string } [opts.name]
     * @param { string } [opts.fn]
     * @returns { AthomWebhooksAPI.Webhook } Success
     * @protected
     */
    protected createWebhook(opts?: {
        token: string;
        name?: string;
        fn?: string;
    }): AthomWebhooksAPI.Webhook;
    /**
     * Get a Webhook
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @param { string } opts.webhookId
     * @returns { AthomWebhooksAPI.Webhook } Success
     * @protected
     */
    protected getWebhook(opts?: {
        token: string;
        webhookId: string;
    }): AthomWebhooksAPI.Webhook;
    /**
     * Update a Webhook
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @param { string } opts.webhookId
     * @param { string } [opts.name]
     * @param { string } [opts.fn]
     * @returns { AthomWebhooksAPI.Webhook } Success
     * @protected
     */
    protected updateWebhook(opts?: {
        token: string;
        webhookId: string;
        name?: string;
        fn?: string;
    }): AthomWebhooksAPI.Webhook;
    /**
     * Delete a Webhook
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @param { string } opts.webhookId
     * @protected
     */
    protected deleteWebhook(opts?: {
        token: string;
        webhookId: string;
    }): void;
    /**
     * Register a Webhook Client
     * @param {object} [opts] - Named parameters
     * @param { string } opts.webhookId
     * @param { string } opts.homeyId
     * @param { string } opts.secret  - The shared secret
     * @param { object } opts.data  - The client data to identify the client on runtime
     * @param { string } [opts.callbackUrl]  - The URL to notify when the webhook has been called
     * @returns { object } Success
     * @protected
     */
    protected registerWebhookClient(opts?: {
        webhookId: string;
        homeyId: string;
        secret: string;
        data: any;
        callbackUrl?: string;
    }): any;
    /**
     * Unrgister a Webhook Client
     * @param {object} [opts] - Named parameters
     * @param { string } opts.webhookId
     * @param { string } opts.homeyId
     * @returns { object } Success
     * @protected
     */
    protected unregisterWebhookClient(opts?: {
        webhookId: string;
        homeyId: string;
    }): any;
}

/**
 * A storage adapter is used to persist sessions.
 * It is possible to supply your own storage adapter by
 * extending this class and supplying an instance of it to the constructor of {{AthomCloudAPI}}.
 */
declare class AthomStorageAdapter {
    /**
     * This function should return the stored object or null
     * @returns {object}
     */
    get(): any;
    /**
     * This function should update the stored object
     * @param {object} value - the new value
     * @returns {object}
     */
    set(value: any): any;
}

declare namespace AthomStorageAdapter {
    /**
     *
     * @param {string} key The key to use in the local storage
     */
    class LocalStorage {
        constructor(key: string);
    }
}

/**
 * @class EventEmitter
 * @see {@link https://nodejs.org/api/events.html|Node.js EventEmitter}
 * @hideconstructor
 */
declare class EventEmitter {
}


//APPEND_MARKER
//This is appended to the types.d.ts to actually export stuff
export {
    HomeyAPI,
    AthomCloudAPI,
    AthomAppsAPI,
    AthomConnectAPI,
    AthomFirmwareAPI,
    AthomSetupAPI,
    AthomStorageAdapter,
  };


declare module AthomApi {
  const HomeyAPI: HomeyAPI;
  const AthomCloudAPI: AthomCloudAPI;
  const AthomAppsAPI: AthomAppsAPI;
  const AthomConnectAPI: AthomConnectAPI;
  const AthomFirmwareAPI: AthomFirmwareAPI;
  const AthomSetupAPI: AthomSetupAPI;
  const AthomStorageAdapter: AthomStorageAdapter;
}
export default AthomApi;